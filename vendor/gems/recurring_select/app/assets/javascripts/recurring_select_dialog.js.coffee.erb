window.RecurringSelectDialog =
  class RecurringSelectDialog
    constructor: (@recurring_selector, @options = {}) ->
      @current_rule = @recurring_selector.recurring_select('current_rule')
      @initDialogBox()
      if not @current_rule.hash? or not @current_rule.hash.rule_type?
        @freqChanged()
      else
        setTimeout @positionDialogVert, 10 # allow initial render

    initDialogBox: ->
      $(".rs_dialog_holder").remove()

      open_in = $("body")
      open_in = $(".ui-page-active") if $(".ui-page-active").length
      open_in.append @template()
      @outer_holder = $(".rs_dialog_holder")
      @inner_holder = @outer_holder.find ".rs_dialog"
      @content = @outer_holder.find ".rs_dialog_content"
      @positionDialogVert(true)
      @mainEventInit()
      @freqInit()
      @freq_select.focus()
      @outer_holder.trigger "recurring_select:dialog_opened"
      @startDatepicker = @inner_holder.find('.start-datepicker')
      @endDatepicker = @inner_holder.find('.end-datepicker')
      @startAt = @inner_holder.find('.start-at')
      @endAt = @inner_holder.find('.end-at')
      if !@options.hourly
        @inner_holder.find('.time-picker-row').hide()
      @radioEndAfter = @inner_holder.find('.radio_end_after')
      @radioEndOn = @inner_holder.find('.radio_end_on')
      @occurrencesInput = @inner_holder.find('.occurrences-input')
      @populateTimeOptions(@startAt, @endAt)
      @setupDatepicker(@startDatepicker, @endDatepicker)
      @summaryInit()
      @startAt.on 'change', =>
        @summaryUpdate()
      @endAt.on 'change', =>
        @summaryUpdate()
      @radioEndAfter.on 'change', =>
        @summaryUpdate()
      @radioEndOn.on 'change', =>
        @summaryUpdate()
      @occurrencesInput.on 'blur', =>
        @summaryUpdate() if @radioEndAfter.prop('checked')



    positionDialogVert: (initial_positioning) =>
      window_height = $(window).height()
      window_width  = $(window).width()
      dialog_height = @content.outerHeight()
      if dialog_height < 80
        dialog_height = 80
      margin_top = (window_height - dialog_height)/2
      margin_top = 10 if margin_top < 10

      new_style_hash =
        "margin-top" : margin_top+"px"
        "min-height" : dialog_height+"px"

      if initial_positioning?
        @inner_holder.css new_style_hash
        @inner_holder.trigger "recurring_select:dialog_positioned"
      else
        @content.css {"width": @content.width()+"px"}
        @inner_holder.addClass "animated"
        @inner_holder.animate new_style_hash, 200, =>
          @inner_holder.removeClass "animated"
          @content.css {"width": "auto"}
          @inner_holder.trigger "recurring_select:dialog_positioned"

    cancel: =>
      @outer_holder.remove()
      @recurring_selector.recurring_select('cancel')

    outerCancel: (event) =>
      if $(event.target).hasClass("rs_dialog_holder")
        @cancel()

    save: =>
      return if !@current_rule.str?
      @outer_holder.remove()

      form_data = {}
      form_data.start_on = @startDatepicker.val()
      form_data.start_at = @startAt.val()
      form_data.end_at = @endAt.val()
      if @radioEndAfter.prop('checked')
        form_data.occurrences = @occurrencesInput.val()
      else if @radioEndOn.prop('checked')
        form_data.end_on = @endDatepicker.val()
      @recurring_selector.recurring_select('save', @current_rule, form_data)

# ========================= Init Methods ===============================

    mainEventInit: ->
      # Tap hooks are for jQueryMobile
      @outer_holder.on 'click tap', @outerCancel
      @content.on 'click tap', 'h1 a', @cancel
      @save_button = @content.find('input.rs_save').on "click tap", @save
      @content.find('input.rs_cancel').on "click tap", @cancel

    freqInit: ->
      @freq_select = @outer_holder.find ".rs_frequency"
      if @current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?
        if rule_type.search(/Weekly/) != -1
          @freq_select.prop('selectedIndex', 1)
          @initWeeklyOptions()
        else if rule_type.search(/Monthly/) != -1
          @freq_select.prop('selectedIndex', 2)
          @initMonthlyOptions()
        else if rule_type.search(/Yearly/) != -1
          @freq_select.prop('selectedIndex', 3)
          @initYearlyOptions()
        else
          @initDailyOptions()
      @freq_select.on "change", @freqChanged

    initDailyOptions: ->
      section = @content.find('.daily_options')
      interval_input = section.find('.rs_daily_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()

    initWeeklyOptions: ->
      section = @content.find('.weekly_options')

      # connect the interval field
      interval_input = section.find('.rs_weekly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged

      # connect the day fields
      if @current_rule.hash.validations? && @current_rule.hash.validations.day?
        $(@current_rule.hash.validations.day).each (index, val) ->
          section.find(".day_holder a[data-value='"+val+"']").addClass("selected")
      section.on "click", ".day_holder a", @daysChanged

      section.show()

    initMonthlyOptions: ->
      section = @content.find('.monthly_options')
      interval_input = section.find('.rs_monthly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged

      @current_rule.hash.validations ||= {}
      @current_rule.hash.validations.day_of_month ||= []
      @current_rule.hash.validations.day_of_week ||= {}
      @init_calendar_days(section)
      @init_calendar_weeks(section)

      in_week_mode = Object.keys(@current_rule.hash.validations.day_of_week).length > 0
      section.find(".monthly_rule_type_week").prop("checked", in_week_mode)
      section.find(".monthly_rule_type_day").prop("checked", !in_week_mode)
      @toggle_month_view()
      section.find("input[name=monthly_rule_type]").on "change", @toggle_month_view
      section.show()

    initYearlyOptions: ->
      section = @content.find('.yearly_options')
      interval_input = section.find('.rs_yearly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()


    summaryInit: ->
      @summary = @outer_holder.find(".rs_summary")
      @summaryUpdate()

# ========================= render methods ===============================

    summaryUpdate: (new_string) =>
      @summary.width @content.width()
      if @current_rule.hash? && @current_rule.str?
        @summary.removeClass "fetching"
        @save_button.removeClass("disabled")
        rule_str = @current_rule.str.replace("*", "")
        rule_str += ", from #{@startAt.find('option:selected').text()} to #{@endAt.find('option:selected').text()}"
        if @startDatepicker.val() != ''
          rule_str += ', beginning on ' + @formatDateForSummary(@startDatepicker.val())
        if @radioEndAfter.prop('checked')
          rule_str += ", ends after #{@occurrencesInput.val()} occurrences"
        else if @radioEndOn.prop('checked') && @endDatepicker.val() != ''
          rule_str += ", until #{@formatDateForSummary(@endDatepicker.val())}"

        @summary.find("span").html rule_str
      else
        @summary.addClass "fetching"
        @save_button.addClass("disabled")
        @summary.find("span").html ""
        @summaryFetch()

    formatDateForSummary: (date) ->
      components = date.split('-')
      date = new Date(components[0], components[1]-1, components[2])
      "#{components[2]}#{DNM.util.Date.suffix(date)}, #{DNM.util.Date.monthName(date)}, #{components[0]}"


    summaryFetch: ->
      return if !(@current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?)
      @content.css {"width": @content.width()+"px"}
      $.ajax
        url: "/recurring_select/translate",
        type: "POST",
        data: @current_rule.hash
        success: @summaryFetchSuccess

    summaryFetchSuccess: (data) =>
      @current_rule.str = data
      @summaryUpdate()
      @content.css {"width": "auto"}

    init_calendar_days: (section) =>
      monthly_calendar = section.find(".rs_calendar_day")
      monthly_calendar.html ""
      for num in [1..31]
        monthly_calendar.append (day_link = $(document.createElement("a")).text(num))
        if $.inArray(num, @current_rule.hash.validations.day_of_month) != -1
          day_link.addClass("selected")

      # add last day of month button
      monthly_calendar.append (end_of_month_link = $(document.createElement("a")).text($.fn.recurring_select.texts["last_day"]))
      end_of_month_link.addClass("end_of_month")
      if $.inArray(-1, @current_rule.hash.validations.day_of_month) != -1
        end_of_month_link.addClass("selected")

      monthly_calendar.find("a").on "click tap", @dateOfMonthChanged

    init_calendar_weeks: (section) =>
      monthly_calendar = section.find(".rs_calendar_week")
      monthly_calendar.html ""
      row_labels = $.fn.recurring_select.texts["order"]
      cell_str = $.fn.recurring_select.texts["days_first_letter"]

      for num in [1..4]
        monthly_calendar.append "<span>#{row_labels[num - 1]}</span>"
        for day_of_week in [0..6]
          day_link = $("<a>", {text: cell_str[day_of_week]})
          day_link.attr("day", day_of_week)
          day_link.attr("instance", num)
          monthly_calendar.append day_link
      $.each @current_rule.hash.validations.day_of_week, (key, value) ->
        $.each value, (index, instance) ->
          section.find("a[day='#{key}'][instance='#{instance}']").addClass("selected")
      monthly_calendar.find("a").on "click tap", @weekOfMonthChanged

    toggle_month_view: =>
      week_mode = @content.find(".monthly_rule_type_week").prop("checked")
      @content.find(".rs_calendar_week").toggle(week_mode)
      @content.find(".rs_calendar_day").toggle(!week_mode)

# ========================= Change callbacks ===============================

    freqChanged: =>
      @current_rule.hash = null unless $.isPlainObject(@current_rule.hash) # for custom values

      @current_rule.hash ||= {}
      @current_rule.hash.interval = 1
      @current_rule.hash.until = null
      @current_rule.hash.count = null
      @current_rule.hash.validations = null
      @content.find(".freq_option_section").hide()
      @content.find("input[type=checkbox]").prop("checked", false)
      switch @freq_select.val()
        when "Weekly"
          @current_rule.hash.rule_type = "IceCube::WeeklyRule"
          @current_rule.str = $.fn.recurring_select.texts["weekly"]
          @initWeeklyOptions()
        when "Monthly"
          @current_rule.hash.rule_type = "IceCube::MonthlyRule"
          @current_rule.str = $.fn.recurring_select.texts["monthly"]
          @initMonthlyOptions()
        when "Yearly"
          @current_rule.hash.rule_type = "IceCube::YearlyRule"
          @current_rule.str = $.fn.recurring_select.texts["yearly"]
          @initYearlyOptions()
        else
          @current_rule.hash.rule_type = "IceCube::DailyRule"
          @current_rule.str = $.fn.recurring_select.texts["daily"]
          @initDailyOptions()
      @summaryUpdate()
      @positionDialogVert()

    intervalChanged: (event) =>
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.interval = parseInt($(event.currentTarget).val())
      if @current_rule.hash.interval < 1 || isNaN(@current_rule.hash.interval)
        @current_rule.hash.interval = 1
        # $(event.currentTarget).val(@current_rule.hash.interval)
      @summaryUpdate()

    daysChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".day_holder a.selected").map -> parseInt($(this).data("value"))
      @current_rule.hash.validations.day = raw_days.get()
      @summaryUpdate()
      false # this prevents default and propogation

    dateOfMonthChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".monthly_options .rs_calendar_day a.selected").map ->
        res = if $(this).text() == $.fn.recurring_select.texts["last_day"] then -1 else parseInt($(this).text())
        res
      @current_rule.hash.validations.day_of_week = {}
      @current_rule.hash.validations.day_of_month = raw_days.get()
      @summaryUpdate()
      false

    weekOfMonthChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      @current_rule.hash.validations.day_of_month = []
      @current_rule.hash.validations.day_of_week = {}
      @content.find(".monthly_options .rs_calendar_week a.selected").each (index, elm) =>
        day = parseInt($(elm).attr("day"))
        instance = parseInt($(elm).attr("instance"))
        @current_rule.hash.validations.day_of_week[day] ||= []
        @current_rule.hash.validations.day_of_week[day].push instance
      @summaryUpdate()
      false

    setupDatepicker: (startElement, endElement) ->
      @datepicker = new Bookings.RecurringDatepicker(startElement: startElement, endElement: endElement)
      @datepicker.setDates([new Date(), DNM.util.Date.advance(new Date, months: 1)])

      @datepicker.on 'startOnChanged', (date) =>
        @summaryUpdate()

      @datepicker.on 'endOnChanged', (date) =>
        @summaryUpdate() if @radioEndOn.prop('checked')

# ========================= Change callbacks ===============================

    template: () ->
      str = "
      <div class='rs_dialog_holder'>
        <div class='rs_dialog form-horizontal'>
          <div class='rs_dialog_content'>
            <h1>#{$.fn.recurring_select.texts["repeat"]} <a href='#' title='#{$.fn.recurring_select.texts["cancel"]}' Alt='#{$.fn.recurring_select.texts["cancel"]}'></a> </h1>
            <p>
              <div class='control-group'>
                <label class='control-label' for='rs_frequency'>#{$.fn.recurring_select.texts["frequency"]}:</label>
                <div class='controls'>
                  <select id='rs_frequency' class='rs_frequency' name='rs_frequency'>
                    <option value='Daily'>#{$.fn.recurring_select.texts["daily"]}</option>
                    <option value='Weekly'>#{$.fn.recurring_select.texts["weekly"]}</option>
                    <option value='Monthly'>#{$.fn.recurring_select.texts["monthly"]}</option>
                    <option value='Yearly'>#{$.fn.recurring_select.texts["yearly"]}</option>
                  </select>
                </div>
              </div>
            </p>

            <div class='daily_options freq_option_section'>
              <p>
                <div class='control-group'>
                  <label class='control-label' for='rs_daily_interval'>#{$.fn.recurring_select.texts["every"]}:</label>
                  <div class='controls'>
                    <input type='number' min=1 name='rs_daily_interval' class='rs_daily_interval rs_interval' value='1' size='2' /> <span class='alternate-text'> #{$.fn.recurring_select.texts["days"]}</span>
                  </div>
                </div>
              </p>
            </div>
            <div class='weekly_options freq_option_section'>
              <p>
                <div class='control-group'>
                  <label class='control-label' for='rs_weekly_interval'>#{$.fn.recurring_select.texts["every"]}:</label>
                  <div class='controls'>
                    <input type='number' min=1 name='rs_weekly_interval' class='rs_weekly_interval rs_interval' value='1' size='2' /> <span class='alternate-text'>#{$.fn.recurring_select.texts["weeks"]}</span>
                  </div>
                </div>
              </p>
              <p>
                <div class='control-group'>
                  <label class='control-label repeat-on'>#{$.fn.recurring_select.texts["every_on"]}:</label>
                  <div class='controls'>
                    <div class='day_holder'>"
      for day_of_week in [$.fn.recurring_select.texts["first_day_of_week"]...(7 + $.fn.recurring_select.texts["first_day_of_week"])]
        day_of_week = day_of_week % 7
        str += "<a href='#' data-value='#{day_of_week}'>#{$.fn.recurring_select.texts["days_first_letter"][day_of_week]}</a>"

      str += "
                    </div>
                    <div class='clearfix'></div>
                  </div>
                </div>
              </p>
            </div>
            <div class='monthly_options freq_option_section'>
              <div class='control-group'>
                <label class='control-label' for='rs_monthly_interval'>#{$.fn.recurring_select.texts["every"]}:</label>
                <div class='controls'>
                  <input type='number' min='1' name='rs_monthly_interval' class='rs_monthly_interval rs_interval' value='1' size='2' /> <span class='alternate-text'> #{$.fn.recurring_select.texts["months"]}</span>
                </div>
              </div>
              <div class='control-group'>
                <label class='control-label'>#{$.fn.recurring_select.texts["every_by"]}:</label>
                <div class='controls'>
                  <label><span class='pull-left'><input type='radio' class='monthly_rule_type_day' name='monthly_rule_type' value='true' /> #{$.fn.recurring_select.texts["day_of_month"]}</span></label>
                  <label><span class='pull-left' style='margin-left: 12px;'><input type='radio' class='monthly_rule_type_week' name='monthly_rule_type' value='true' /> #{$.fn.recurring_select.texts["day_of_week"]} </span></label>
                  <div class='clearfix'></div>
                  <p class='monthly_rule_type'></p>
                  <p class='rs_calendar_day'></p>
                  <p class='rs_calendar_week'></p>
                </div>
              </div>
            </div>
            <div class='yearly_options freq_option_section'>
              <div class='control-group'>
                <label class='control-label' for='rs_yearly_interval'>#{$.fn.recurring_select.texts["every"]}:</label>
                <div class='controls'>
                  <input type='number' min='1' name='rs_yearly_interval' class='rs_yearly_interval rs_interval' value='1' size='2' /> <span class='alternate-text'> #{$.fn.recurring_select.texts["years"]}</span>
                </div>
              </div>
              <p>
              </p>
            </div>
            <p>
              <div class='control-group'>
                <label class='control-label' for='starts_on'>#{$.fn.recurring_select.texts["starts_on"]}:</label>
                <div class='controls'>
                  <input class='start-datepicker' name='starts_on' size='12' />
                </div>
              </div>
            </p>
            <p>
              <div class='control-group time-picker-row'>
                <label class='control-label' for='start_at'>#{$.fn.recurring_select.texts["from"]}:</label>
                <div class='controls'><select class='start-at' name='start_at'></select> <span class='to-separator'>#{$.fn.recurring_select.texts["to"]}</span> <select class='end-at' name='end_at'></select>
                </div>
              </div>
            </p>
            <div class='control-group'>
              <label class='control-label'>#{$.fn.recurring_select.texts["ends"]}:</label>
              <div class='controls'>
                <label for='radio_end'><input type='radio' class='radio_end_after' name='radio_end' checked=checked><span class='alternate-text'>#{$.fn.recurring_select.texts["after"]}</span><input class='occurrences-input' type='number' max=50 min=1 name='occurrences' value='10' size='2' /></label><span class='alternate-text'>#{$.fn.recurring_select.texts["occurrences"]}</span><br />
                <label for='radio_end_date'><input type='radio' class='radio_end_on' name='radio_end'></label><span class='alternate-text'>#{$.fn.recurring_select.texts["on"]}</span> <input class='end-datepicker' name='end_on' size='12' />
              </div>
            </div>
            <div class='control-group rs_summary'>
              <label class='control-label'>#{$.fn.recurring_select.texts["summary"]}:</label>
              <div class='controls'>
                <span></span>
              </div>
            </div>

            <div class='buttons'>
              <input type='submit' class='btn btn-medium btn-gray-light rs_cancel' value='#{$.fn.recurring_select.texts["cancel"]}' />
              <input type='submit' class='btn btn-medium btn-green rs_save' value='#{$.fn.recurring_select.texts["ok"]}' />
            </div>
          </div>
        </div>
      </div>
      "

    populateTimeOptions: (startTime, endTime) ->

      # Build up a list of minutes and select option html elements
      options = []
      curr = 0
      while curr <= 24*60
        options.push "<option value='#{curr}'>#{@formatMinute(curr)}</option>"
        curr += 15

      # Start time is all but the last end time
      startTime.html(_.difference(options, [_.last(options)]).join("\n"))

      # End time is all but the first start time
      steps = _.difference(options, [options[0]])
      # Add the selected attribute to the nth element in the array
      steps[3] = $('<div>').append($(steps[3]).attr('selected', 'selected')).html()
      endTime.html(steps.join("\n"))

    formatMinute: (minute) ->
      h = parseInt(minute / 60, 10) % 12
      h = 12 if h == 0
      m = minute % 60
      ampm = if ((minute / 60) >= 12) then 'pm' else 'am'
      "#{h}:#{if m < 10 then '0' else ''}#{m} #{ampm}"

