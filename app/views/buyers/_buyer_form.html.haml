- only_inputs ||= []

- if only_inputs.empty? || only_inputs.include?(:enabled)
  = f.input :enabled, as: :switch
  - if f.object.instance_profile_type.admin_approval? && !f.object.approved?
    = t('dashboard.user_profile.requires_approval')
- elsif only_inputs.empty? || (category = f.object.instance_profile_type.try(:categories).try(:roots).try(:detect) { |c| "Category - #{c.name}".to_sym == only_inputs.first}).present?
  = render partial: 'dashboard/shared/fields/category', locals: { category: category, f: f, categorizable: f.object.instance_profile_type }
- elsif only_inputs.empty? || f.object.instance_profile_type.custom_model_types.map { |c| "Custom Model - #{c.name}".to_sym }.include?(only_inputs.first)
  - custom_model = f.object.instance_profile_type.custom_model_types.find_by(name: only_inputs.first.to_s.split(" - ")[1])
  = render 'registrations/attributes/custom_model_fields', custom_model: custom_model, f: f
- elsif (f.object.instance_profile_type.try(:custom_attributes).map{ |a| a.name.to_sym } & only_inputs).any?
  - f.object.instance_profile_type.try(:custom_attributes).try(:each) do |attribute|
    = draw_attribute_for_form(attribute, properties_form) if only_inputs.empty? || only_inputs.include?(attribute.name.to_sym)
- elsif f.object.user.respond_to?(only_inputs.first)
  = render :partial => 'registrations/new_attributes', :locals => { f: user_form, only_inputs: only_inputs }
