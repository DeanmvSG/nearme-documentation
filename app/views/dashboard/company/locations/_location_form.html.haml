- only_inputs = [] if only_inputs.nil?

- if only_inputs.empty? || only_inputs.include?(:name)
  = f.input :name, :as => :limited_string, :hint => t('simple_form.hints.location.name'), :required => f.object.validation_for(:name).try(:is_required?) if only_inputs.empty? || only_inputs.include?(:name)

- if only_inputs.empty? || only_inputs.include?(:address)
  = f.simple_fields_for :location_address, (f.object.location_address.presence || f.object.build_location_address) do |address_form|
    = render 'dashboard/shared/fields/address', :f => address_form, field_label: t('simple_form.labels.locations.location_address.address'), field_hint: t('simple_form.hints.locations.location_address.address', default: ''), restrict_countries: allowed_country_codes

- if only_inputs.empty? || only_inputs.include?(:time_zone)
  = f.input :time_zone, default: f.object.company.time_zone, input_html: { class: 'selectpicker', "data-live-search" => "true" } if only_inputs.empty? || only_inputs.include?(:time_zone)

- if only_inputs.empty? || only_inputs.include?(:description)
  = f.input :description, :as => :limited_text, :required => f.object.validation_for(:description).try(:is_required?), :input_html => { :rows => 2 } if only_inputs.empty? || only_inputs.include?(:description)

- if only_inputs.empty? || only_inputs.include?(:location_type)
  - if platform_context.instance.location_types.many?
    = f.association :location_type, :collection => platform_context.instance.location_types, input_html: {class: 'selectpicker'} if only_inputs.empty? || only_inputs.include?(:location_type)
  - elsif
    = f.hidden_field :location_type_id, value: platform_context.instance.location_types.first.id

- if only_inputs.empty? || only_inputs.include?(:email)
  = f.input :email if only_inputs.empty? || only_inputs.include?(:email)

- if only_inputs.empty? || only_inputs.include?(:administrator)
  = f.association :administrator, :collection => f.object.company_users.includes(:user).order('users.name').map(&:user), :label_method => 'name', :value_method => 'id', :input_html => { :class => 'selectpicker' }, :include_blank => t('simple_form.prompts.location.administrator') if only_inputs.empty? || only_inputs.include?(:administrator)

- if only_inputs.empty? || only_inputs.include?(:special_notes)
  = f.input :special_notes, :label => t('simple_form.labels.location.special_notes', lessee: platform_context.lessee.capitalize), :placeholder => t('simple_form.placeholders.location.special_notes', lessee: platform_context.lessee, lessees: platform_context.lessee.pluralize) if only_inputs.empty? || only_inputs.include?(:special_notes)

- if only_inputs.empty? || only_inputs.include?(:availability_rules)
  = render 'dashboard/company/transactables/form_fields/availability', f: f, id_prefix: 'dialog', title: t('dashboard.location.availability.title')

- if (only_inputs.empty? || only_inputs.include?(:assigned_waiver_agreement_templates)) && f.object.company.waiver_agreement_templates.count > 0
  = f.association :waiver_agreement_templates, collection: f.object.company.waiver_agreement_templates.order(:name).pluck(:name, :id), as: :check_boxes
