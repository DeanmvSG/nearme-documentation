%div{'data-address-field' => true, class: "form-group #{"has-error" if f.object.errors.any?}"}

  = f.label :address, required: true do
    %abbr{ title: "required" }
      *
    = field_label
    - if defined?(field_hint) && field_hint.present?
      = hint_button field_hint

  = f.text_field :address, :'data-behavior' => 'address-autocomplete', placeholder: t('locations.address_placeholder'), 'data-address-input' => true, class: 'form-control', :'data-precise-search' => current_instance.precise_search?, :'data-restrict-countries' => (defined?(restrict_countries) ? restrict_countries : []).to_json

  - if f.object.errors.include?(:address) || f.object.errors.include?(:latitude)
    %span.help-block
      - if f.object.errors[:address].present?
        = f.object.errors[:address][0]
      - else
        = t('locations.does_not_exist')

  .map
    .map-container


  = f.hidden_field :should_check_address, value: current_instance.precise_search? || params[:should_check_address]
  = f.hidden_field :local_geocoding, 'data-local-geocoding' => true
  = f.hidden_field :latitude, 'data-latitude' => true
  = f.hidden_field :longitude, 'data-longitude' => true
  = f.hidden_field :formatted_address, 'data-formatted-address' => true
  = f.hidden_field :street, 'data-street' => true
  = f.hidden_field :suburb, 'data-suburb' => true
  = f.hidden_field :city, 'data-city' => true
  = f.hidden_field :state, 'data-state' => true
  = f.hidden_field :country, 'data-country' => true
  = f.hidden_field :postcode, 'data-postcode' => true

  .address-component-wrapper.hidden
    .address-component-template
      - # we need this input to avoid hardcoding 'name' parameter for dynamically inserted inputs for address_components
      - # i.e. in dashboard we use location[address_component], but in list your space it is user[company_attribues]... etc
      - # must be disabled, otherwise update action could overwrite existing information with empty strings!
      = f.input :address_components, as: :string, :input_html => { 'data-address-components-input' => true }, disabled: true
    - if f.object.address_components.try(:any?)
      - f.object.address_components.each do |index, address_component|
        - address_component.each do |key, value|
          %input{name: "#{f.object_name}[address_components][#{index}][#{key}]", value: value, class: 'address_components_input'}
