= simple_form_for @theme, :url => instance_admin_theme_design_path, :html => { id: 'theme_form', :multipart => true } do |f|
  %fieldset
    %legend Colors
    - Theme::COLORS.each_slice(2).each_with_index do |color, index|
      .row-fluid
        .controls.controls-row
          = f.input "color_#{color[0]}", :label => color[0].humanize, wrapper_html: {class: 'span6'} do
            = f.text_field "color_#{color[0]}", {:type => :color, :value => f.object.hex_color(color[0]).presence || hexify(Theme::COLORS_DEFAULT_VALUES[index*2]), 'data-default' => hexify(Theme::COLORS_DEFAULT_VALUES[index*2]), 'data-color' => color[0]}
            = link_to "default", '', 'data-reset' => color[0]

          - if color[1]
            = f.input "color_#{color[1]}", :label => color[1].humanize, wrapper_html: {class: 'span6'} do
              = f.text_field "color_#{color[1]}", {:type => :color, :value => f.object.hex_color(color[1]).presence || hexify(Theme::COLORS_DEFAULT_VALUES[index*2+1]), 'data-default' => hexify(Theme::COLORS_DEFAULT_VALUES[index*2+1]), 'data-color' => color[1]}
              = link_to "default", '', 'data-reset' => color[1]

    %hr

    %legend Visuals
    - %w(logo_image logo_retina_image favicon_image icon_image icon_retina_image hero_image).each_slice(2) do |image_attr|
      .row-fluid
        .controls.controls-row
          .control-group.span6
            = f.label image_attr[0]
            .controls
              = f.file_field image_attr[0]
              - if f.object.send("remote_#{image_attr[0]}_url")
                <br />Or copy from instance's theme:<br />
                = f.text_field "remote_#{image_attr[0]}_url"
          -if image_attr[1]
            .control-group.span6
              = f.label image_attr[1]
              .controls
                = f.file_field image_attr[1]
                - if f.object.send("remote_#{image_attr[1]}_url")
                  <br />Or copy from instance's theme:<br />
                  = f.text_field "remote_#{image_attr[1]}_url"

    %hr

    %legend Fonts
    = f.fields_for :theme_font do |tf_f|
      - ThemeFont::FONT_TYPES.each do |font_type|
        - ThemeFont::FONT_EXTENSIONS.each_slice(2).each do |file_extensions|
          .row-fluid
            .controls.controls-row
              - file_extensions.each do |file_extension|
                .control-group.span6
                  = f.label "#{font_type}_#{file_extension}", label: "#{font_type.camelize} font (#{file_extension})"
                  = tf_f.file_field "#{font_type}_#{file_extension}"
                  - if tf_f.object.persisted? && tf_f.object.send("#{font_type}_#{file_extension}")
                    = File.basename(tf_f.object.send("#{font_type}_#{file_extension}_url"))

    %hr

    %legend Call to action
    .row-fluid
      .controls.controls-row
        = f.input :call_to_action, label: 'CTA Button Text', :placeholder => 'Find out more', wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }

    = f.button :submit, 'Save', class: 'btn btn-primary pull-right'

- content_for :domready do
  new InstanceAdmin.ThemeController($('#theme_form'))
