- unless @payment_gateway.can_disable?
  .row-fluid
    .span12
      %div{class: "alert error", 'data-flash-message' => true}
        %a.close{"data-dismiss" => "alert", href: "#"} &nbsp;
        %p
          %i{ :class => instance_admin_ico_for_flash(:error)}
          This Payment Gateway has live Merchant Accounts asscociated. If you want to disable it please first void all
          = link_to "Merchant Accounts", "/instance_admin/manage/merchant_accounts?payment_gateway_id=#{@payment_gateway.id}&state=verified&mode=live"

= simple_form_for [:instance_admin, :settings, @payment_gateway], html: {id: "edit-payment-gateway"} do |f|
  - if @payment_gateway.new_record?
    .content-container
      .row
        .input-container.col-xs-12
          = f.input :type, collection: PaymentGateway::PAYMENT_GATEWAYS, :input_html => {data: { "payment-gateway": true }}
      .row
        .input-container.col-xs-12
          = button_tag t('instance_admin.save'), class: "btn btn-blue pull-right", data: { disable_with: "Please wait..." }
          = link_to t('instance_admin.cancel'), instance_admin_settings_payments_url , class: 'btn btn-light pull-right'

  - else
    .content-container
      .row
        .input-container.col-xs-6
          %h4= @payment_gateway.name.to_s + " " + t('instance_admin.settings.payments.payment_gateways.edit')
        .input-container.col-xs-6
          .pull-right
            %h2 TURNED ON/OFF
            - if current_instance.test_mode?
              = f.input :test_active, as: :bootstrap_switch, label: false
              %span.fa.fa-info-circle Marketplace operates in test mode
            - else
              = f.input :live_active, as: :bootstrap_switch, label: false, disabled: !@payment_gateway.can_disable?
              %span.fa.fa-info-circle Marketplace operates in live mode
      %br

    .content-container
      .row
        .input-container.col-xs-6
          = f.hidden_field :type
          .row
            %h4= "Useful information:"
          .row
            %ul
              - if @payment_gateway.supports_manual_payment?
                %li All transactions are processed outside the system.
                %li Free payment method is required to allow zero amount transactions.
              - elsif @payment_gateway.supports_payout?
                %li Designed for scheduled automated #{link_to 'payment transfers', '/instance_admin/manage/transfers'}.
              - else
                %li
                  - if @payment_gateway.supports_partial_refunds?
                    Partial refunds are supported. It's possible to configure cancelation policy rules per Service type.
                  - else
                    Cancellation policies are not included. When user cancel reservation total amount is always refunded.
                %li
                  - if @payment_gateway.supports_immediate_payout?
                    Transaction happens between buyer and seller. Marketplace owner is not primary receiver in that case and only receive service fees if configured.
                  - else
                    Marketplace owner is primary receiver of every transaction. Automated payouts can be integrated when PayPal Adaptive Payment Gateway is properly configured
              - if @payment_gateway.documentation_url
                %li
                  You can find more information in the
                  = link_to " official documentation.", @payment_gateway.documentation_url, :target => '_blank'

        .input-container.col-xs-6
          - if @payment_gateway.payment_methods.size > 1
            .row
              %h4 Payment Methods:
          .row
            = f.simple_fields_for :payment_methods do |p|
              .input-container.col-xs-6
                = p.input :payment_method_type, as: :hidden
                - if @payment_gateway.payment_methods.size > 1
                  = p.input :active, as: :boolean, inline_label: p.object.name, :input_html => { :checked => p.object.active? }
                - else
                  = p.input :active, as: :hidden, :input_html => { :value => true }

          - if f.object.class.settings.keys.present?
            - if current_instance.test_mode?
              %h4 Sandbox settings:
              .row
                .input-container.col-xs-12
                  = f.fields_for :test_settings, OpenStruct.new(@payment_gateway.test_settings) do |test|
                    - f.object.class.settings.keys.each do |setting|
                      = test.input setting, as: :string, input_html: { class: 'form-control', required: false }
            - else
              %h4 Live settings:
              - if @payment_gateway.editable?
                .row
                  .input-container.col-xs-12
                    = f.fields_for :live_settings, OpenStruct.new(@payment_gateway.live_settings) do |live|
                      - f.object.class.settings.keys.each do |setting|
                        = live.input setting, as: :string, input_html: { class: 'form-control', required: false, disabled: !@payment_gateway.editable? }
              - else
                .row
                  .input-container.col-xs-12
                    .text-info.bg-info
                      %p
                        %span.fa.fa-info-circle
                        = t('flash_messages.instance_admin.settings.payments.payment_gateways.can_not_be_edited')
                        Use ON/OFF switch to prevent users from using it. Payment Gateway will move into editable state when there are no refundable or pending Payments, all Merchant Accounts should be removed.


      %br
    - if @payment_gateway.config_settings.present?
      .content-container
        .row
          - @payment_gateway.config_settings.each do |key, options|
            - if options.instance_of?(Hash)
              .row
                %h4=t('instance_admin.settings.payments.payment_gateways.edit.' + key.to_s)
              .row
                - options.each do |nested_key, nested_options|
                  .input-container.col-xs-4
                    = label_tag "payment_gateway[config][#{key}][#{nested_key}]", t("simple_form.labels.payment_gateway.config.#{key}.#{nested_key}")
                    - if nested_options.try('[]', :valid_values)
                      = select_tag "payment_gateway[config][#{key}][#{nested_key}]", options_for_select(nested_options.try('[]', :valid_values).map {|v| [v.to_s.capitalize, v]} , @payment_gateway.config[key].try('[]', nested_key.to_s) ), { class: 'selectpicker' }.merge(nested_options.try('[]', :data))
                    - else
                      = text_field_tag "payment_gateway[config][#{key}][#{nested_key}]", @payment_gateway.config[key].try('[]', nested_key.to_s), { class: 'string required form-control' }.merge(nested_options.try('[]', :data))



    - unless @payment_gateway.new_record?
      .content-container
        .row
          .input-container.col-xs-6

            Links:
            %ul
              %li=link_to "Associated Payments ", instance_admin_manage_payments_path(payment_gateway_id: @payment_gateway.id, transferred: "all", mode: "live")
              - if @payment_gateway.payout_gateway?
                %li=link_to "Associated Merchant Accounts", instance_admin_manage_merchant_accounts_path(payment_gateway_id: @payment_gateway.id, mode: "live")

      .content-container
        %h4
          Localization settings:
        .input-container.col-xs-12
          %br
          .row
            .input-container.col-xs-6
              = f.association :payment_countries, label_method: :full_name, collection: @payment_gateway.available_payment_countries, input_html: { "data-live-search" => "true", multiple: true }, label: "Payment countries - use this Payment Gateway for hosts based in country:"
            .input-container.col-xs-6
              = f.association :payment_currencies, label_method: :full_name, collection: @payment_gateway.available_currencies, input_html: { "data-live-search" => "true", multiple: @payment_gateway.supports_multiple_currency? }, label: "Payment currencies - use this Payment Gateway for hosts selling in currency:"
              %span
                Additional exchange fees may apply.
                - if @payment_gateway.name.include?("Stripe")
                  You can find more information
                  = link_to('here', 'https://support.stripe.com/questions/which-currencies-does-stripe-support', target: '_blank') + '.'

    = content_for :header_buttons do
      = button_tag t('instance_admin.save'), class: "btn btn-blue pull-right", data: { 'submit-form' => 1, 'form-selector' => 'form',  disable_with: "Please wait..."}
      = link_to t('instance_admin.cancel'), instance_admin_settings_payments_url , class: 'btn btn-light pull-right'

- content_for :domready do
  $(document).trigger('init:paymentgateway.nearme', ['#edit-payment-gateway'])

