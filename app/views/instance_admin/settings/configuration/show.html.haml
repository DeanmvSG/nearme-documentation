= simple_nested_form_for @instance, :url => instance_admin_settings_configuration_path, :html => { :multipart => true } do |f|
  %fieldset
    %legend Basic Configuration
    .row-fluid
      .controls.controls-row
        = f.input :name, label: 'Marketplace Name', required: false, wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }
        = f.input :service_fee_guest_percent, label: 'Guest Service Fee', wrapper_html: {class: 'input-prepend span6'} do
          %span.add-on %
          = f.input_field :service_fee_guest_percent, type: 'tel', class: 'input-block-level'
    .row-fluid
      .controls.controls-row
        = f.input :skip_company, :label => false, :inline_label => "Don't require company", wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }
        = f.input :service_fee_host_percent, label: 'Host Service Fee', wrapper_html: {class: 'input-prepend span6'} do
          %span.add-on %
          = f.input_field :service_fee_host_percent, type: 'tel', class: 'input-block-level'

  %hr

  %fieldset
    %legend Marketplace Password
    .row-fluid
      .controls.controls-row
        = f.input :marketplace_password, placeholder: 'Password', as: :string, label: false, wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }
    .row-fluid
      .controls.controls-row
        = f.input :password_protected, required: false, as: :boolean, label: false, inline_label: "Require password to access marketplace (e.g. testing or private marketplaces)", wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }

  %hr

  %fieldset
    %legend Terminology
    .row-fluid
      .controls.controls-row
        = f.input :lessor, label: 'Lessor (e.g. host)', wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }
        = f.input :lessee, label: 'Lessee (e.g. guest)', wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }
    .row-fluid
      .controls.controls-row
        = f.input :bookable_noun, label: 'Bookable Noun (e.g. Desk)', wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }

  %hr

  %fieldset
    %legend Domain Names
    #domains
      = f.fields_for :domains, wrapper: false do |f|
        .row-fluid
          .controls.controls-row
            .fields
              = f.input :name, label: false, wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }
              - unless f.object.near_me_domain?
                = f.link_to_remove confirm: (f.object.name.present? ? "Are you sure you want to delete #{f.object.name}?" : false) do
                  .fa.fa-trash-o.fa-2x.inline-form-icon

    %br
    .row-fluid
      .controls.controls-row
        = f.link_to_add :domains, :data => { :target => "#domains" } do
          %button.btn.btn-form-field.span6
            + Add Domain Name

  %hr

  %fieldset
    %legend Pricing
    .control-group
      .controls
        = f.error :pricing_options
        .row
          - Instance::PRICING_OPTIONS.each do |pricing_option|
            %label.checkbox.span1
              = check_box_tag "instance[pricing_options][#{pricing_option}]", '1', f.object.pricing_options[pricing_option].to_s == '1'
              #{pricing_option.capitalize}

    - Instance::PRICING_OPTIONS.each do |price|
      - next if price == 'free'
      .row-fluid
        .controls.controls-row
          = f.input "min_#{price}_price", label: "Minimum #{price} price", as: :string, wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }
          = f.input "max_#{price}_price", label: "Maximum #{price} price", as: :string, wrapper_html: { class: 'span6' }, input_html: { class: 'input-block-level' }

  %fieldset
    %legend Support
    .row-fluid
      .controls.controls-row
        = f.input :support_email, label: "Support email", input_html: { class: 'input-block-level' }
        = f.input :support_imap_hash, label: "IMAP YAML for Support email", as: :text, input_html: { class: 'input-block-level' }

  = f.button :submit, 'Save', class: 'btn btn-primary pull-right'
