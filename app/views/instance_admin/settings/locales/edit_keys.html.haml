.content-container
  %h4= t 'instance_admin.locales.labels.keys', language: @locale.name
  .row
    .table-container
      = form_tag edit_keys_instance_admin_settings_locale_path, method: :get do
        .filters
          .filter.search
            %input{placeholder: t('instance_admin.locales.labels.search_by_keyword'), type: 'text', name: 'q', value: params[:q]}
            = fa_icon "search", class: 'fa-action-icon-submit'
          .filter.value
            %label
              %input{type: 'checkbox', name: 'case_sensitive', checked: params[:case_sensitive].present?}
              = t('instance_admin.locales.labels.case_sensitive')
          .filter.value
            %label
              %input{type: 'checkbox', name: 'match_whole_words', checked: params[:match_whole_words].present?}
              = t('instance_admin.locales.labels.match_whole_words')
      %table#translations-table
        = simple_nested_form_for @instance, url: instance_admin_settings_translations_path, html: { multipart: true, 'data-edit' => 'keys' } do |f|
          %thead
            %tr
              %th
          %tbody
            - processed_translations = {}
            - @default_and_custom_translations.each_with_index do |translation, index|
              - instance_translation = @translations.detect { |t| t.key == translation.key }
              - next if processed_translations.has_key?(translation.key)
              - processed_translations[translation.key] = true
              %tr
                %td{'data-search' => "#{instance_translation ? (instance_translation.value.present? ? translation.value : instance_translation.value) : translation.value} #{translation.key}" }
                  .row
                    .input-container.col-xs-12
                      %label{for: "instance_translations_#{index}"}= translation.key
                      %input{type: 'hidden', name: "instance[translations_attributes][#{index}][key]", value: translation.key}
                      %input{type: 'hidden', name: "instance[translations_attributes][#{index}][instance_id]", value: @instance.id}
                      %input{type: 'hidden', name: "instance[translations_attributes][#{index}][locale]", value: @locale.code}
                      .translations-input-container
                        - if instance_translation
                          %input.form-control{id: "instance_translations_#{index}", type: 'text', name: "instance[translations_attributes][#{index}][value]", value: instance_translation.value, class: 'locale-item-input'}
                          %input{type: 'hidden', name: "instance[translations_attributes][#{index}][_destroy]", value: 'false'}
                          %input{type: 'hidden', name: "instance[translations_attributes][#{index}][id]", value: instance_translation.id}
                        - else
                          %input.form-control{id: "instance_translations_#{index}", type: 'text', name: "instance[translations_attributes][#{index}][value]", value: '', class: 'locale-item-input' }
                        .default-text
                          = "#{t('instance_admin.locales.labels.default_text')}:"
                          -# In this loop for default_and_custom_translations we get either 1. default translations for
                          -# which there are no custom translations, 2. the default translation for which we have a custom translation
                          -# - this is because we skip and never reach the actual custom translation which follows right after, or 3.
                          -# custom translations. We get to have 3. because we're also searching for "values" and the default translation
                          -# is never hit. In case we have a 3. we want to get the default translation right from the DB because the object
                          -# obviously contains the custom translation
                          - if translation.instance_id.blank?
                            = translation.value
                          - else
                            = default_translation_for_key(translation.key)

            = content_for :header_buttons do
              = f.button :submit, t('instance_admin.locales.buttons.save'), class: 'btn btn-blue pull-right', data: { 'submit-form' => 1, 'form-selector' => 'form' }

  = will_paginate @default_and_custom_translations
