.content-container.reports
  .sub-header-nav
    %ul
      %li
        = link_to t('instance_admin.manage.users.manage_users'), instance_admin_manage_users_path, class: "active"
      %li
        = link_to t('instance_admin.manage.users.users_pending_approval'), pending_approvals_instance_admin_manage_users_path

  %h4= t('instance_admin.manage.users.manage_users')

  .row
    .text-container
      = form_tag instance_admin_manage_users_path, method: :get, enforce_utf8: :false do
        .filters
          = filter_searchable_dates label: t('instance_admin.manage.admin_searchable.user.search_types.date_created'), param_name: 'date'

          = filter_dropdown param_name: :state, label: t('instance_admin.manage.admin_searchable.user.search_types.account_standing'), allow_blank: false, all_values: User::ACCOUNT_STANDINGS.each_with_object({}) { |val, obj| obj[val.to_s] = val.capitalize }

          = filter_dropdown param_name: :profile_type, label: t('instance_admin.manage.admin_searchable.user.search_types.profile_type'), allow_blank: true, blank_label: t('instance_admin.manage.admin_searchable.title_all'), all_values: [:buyer, :seller].each_with_object({}) { |val, obj| obj[val.to_s] = t("instance_admin.manage.admin_searchable.user.profile_types.#{val}") }

          = filter_query_text param_name: 'q', label: t('instance_admin.manage.admin_searchable.user.search_types.search'), placeholder: t('instance_admin.manage.admin_searchable.search_by_keyword')

          = filter_dropdown param_name: :per_page, label: t('instance_admin.manage.admin_searchable.per_page'), allow_blank: false, all_values: {'25' => '25', '50' => '50', '100' => '100' }

  .row
    .table-container.col-xs-12
      %table.table
        %tr
          %th
            = t('instance_admin.manage.users.name')
          %th
            = t('instance_admin.manage.users.email')
          %th
            = t('instance_admin.manage.users.signed_up')
          - if PlatformContext.current.instance.is_community?
            %th
          %th
          %th
          %th
        - collection.each do |resource|
          = render 'index_row', :resource => resource


.row
  .text-container
    .pull-right
      = will_paginate collection
