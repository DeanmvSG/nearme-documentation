- users_pending_approval = UserProfile.includes(:user).joins(:instance_profile_type).where(instance_profile_types: { admin_approval: true }, approved: false)
- if users_pending_approval.any?
  .content-container
    %h4 Users pending approval
    .row
      .table-container.col-xs-12
        %table.table
          %tr
            %th
              = t('instance_admin.manage.users.name')
            %th
              = t('instance_admin.manage.users.email')
            %th
              = t('instance_admin.manage.users.signed_up')
            %th
            %th
            %th
          - users_pending_approval.find_each do |user_profile|
            = render 'index_row', :resource => user_profile.user

.content-container
  %h4= t('instance_admin.manage.users.manage_users')

  .row
    .text-container
      = form_tag instance_admin_manage_users_path, method: :get, enforce_utf8: :false do
        .filters
          .filter.period
            .dropdown.date-dropdown
              %a#dLabel.dropdown-trigger{"aria-expanded" => "false", "aria-haspopup" => "true", "data-target" => "#", "data-toggle" => "dropdown", :role => "button"}
                - if params[:date].present?
                  %span.current= selected_date_value(params[:date])
                - else
                  %span.current
                    = t('instance_admin.manage.admin_searchable.title_all')
                %span.caret
                = hidden_field_tag 'date', date_param_value
              %ul.dropdown-menu{"aria-labelledby" => "dLabel", :role => "menu"}
                %li
                  %a{data: {date: ''}}
                    = t('instance_admin.manage.admin_searchable.title_all')
                - Review::DATE_VALUES.each do |value|
                  %li
                    %a{data: {date: value}}
                      = selected_date_value(value)
                %li.divider
                %li.date-range
                  .date-range-header
                    = t('instance_admin.manage.admin_searchable.date_range')
                  .from
                    = t('instance_admin.manage.admin_searchable.from')
                  %input#from{type: 'text'}
                  .to
                    = t('instance_admin.manage.admin_searchable.to')
                  %input#to{type: 'text'}
                  %button.apply-filter.btn.btn-blue
                    = t('instance_admin.manage.admin_searchable.apply_filter')

          .filter.state
            .dropdown.date-dropdown
              %a#dLabel.dropdown-trigger{"aria-expanded" => "false", "aria-haspopup" => "true", "data-target" => "#", "data-toggle" => "dropdown", :role => "button"}
                - if params[:state].present?
                  %span.current= selected_account_standing(params[:state])
                - else
                  %span.current
                    = t('instance_admin.manage.admin_searchable.title_all')
                %span.caret
                = hidden_field_tag 'state', params[:state]
              %ul.dropdown-menu{"aria-labelledby" => "dLabel", :role => "menu"}
                %li
                  %a{data: {date: ''}}
                    = t('instance_admin.manage.admin_searchable.title_all')
                - User::ACCOUNT_STANDINGS.each do |value|
                  %li
                    %a{data: {date: value}}
                      = value.capitalize

          .filter.search
            %input{placeholder: t('instance_admin.manage.admin_searchable.search_by_keyword'), type: 'text', name: 'q', value: params[:q]}
            %input{type: 'submit', name: 'commit', value:'submit', class: 'hidden_form_element2'}
            =fa_icon "search", class: 'fa-action-icon-submit'

  .row
    .table-container.col-xs-12
      %table.table
        %tr
          %th
            = t('instance_admin.manage.users.name')
          %th
            = t('instance_admin.manage.users.email')
          %th
            = t('instance_admin.manage.users.signed_up')
          - if PlatformContext.current.instance.is_community?
            %th
          %th
          %th
          %th
        - collection.each do |resource|
          = render 'index_row', :resource => resource


.row
  .text-container
    .pull-right
      = will_paginate collection
