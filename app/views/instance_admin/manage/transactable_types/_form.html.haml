= simple_nested_form_for [:instance_admin, :manage, resource], :html => { :multipart => true} do |f|
  %input{ name: :action_name, type: :hidden, value: :edit }
  .content-container
    %h4= t('instance_admin.manage.transactable_types.basic_configuration')
    .row
      .input-container.col-xs-12
        = f.input :name, hint: '', placeholder: '', input_html: { class: 'form-control' }
      .input-container.col-xs-6
        = f.input :show_page_enabled, as: :boolean, :inline_label => true
    .row
      .input-container.col-xs-12
        = f.input :show_path_format, collection: TransactableType::AVAILABLE_SHOW_PATH_FORMATS
    .row
      .input-container.col-xs-6
        = f.input :skip_location, inline_label: true
    .row
      .input-container.col-xs-6
        = f.input :show_company_name, as: :boolean, inline_label: true
      .input-container.col-xs-6
        = f.input :single_location, as: :boolean, inline_label: true
    .row
      - if false # commented out until we have decision how to deal with company/location address
        .input-container.col-xs-6
          = f.input :allowed_countries, collection: Country.all, value_method: :name,  input_html: { class: 'selectpicker', "data-live-search" => "true", multiple: true }
        .input-container.col-xs-6
          = f.input :default_country, collection: Country.all, value_method: :name, input_html: { class: 'selectpicker', "data-live-search" => "true"}
    .row
      .input-container.col-xs-6
        = f.input :allowed_currencies, as: :currency, input_html: { class: 'selectpicker', "data-live-search" => "true", multiple: true }
      .input-container.col-xs-6
        = f.input :default_currency, as: :currency,  input_html: { class: 'selectpicker', "data-live-search" => "true"}

    .row
      .input-container.col-xs-6
        = f.input :groupable_with_others, as: :boolean, :inline_label => true
      .input-container.col-xs-6
        = f.input :enable_photo_required, as: :boolean, :inline_label => true

    .row
      .input-container.col-xs-6
        = f.input :searchable, as: :boolean, :inline_label => true


  .content-container
    %h4= t('instance_admin.manage.transactable_types.booking_settings')
    .row
      .input-container.col-xs-12
        = f.input :timezone_rule, collection: {'Location' => 'location', "Buyer Time Zone" => 'buyer', 'Seller Time Zone' => 'seller', 'Default Time Zone' => 'instance'}, required: false, input_html: { class: 'form-control' }, include_blank: false

  .content-container
    %h4= t('instance_admin.manage.transactable_types.pricing_options')
    .row
      .input-container.col-xs-4
        = f.input :hide_additional_charges_on_listing_page, as: :boolean, :inline_label => true

  .content-container
    %h4= t('instance_admin.manage.transactable_types.terminology')
    .row
      .input-container.col-xs-12
        = f.input :bookable_noun, input_html: { class: 'form-control' }
    .row
      .input-container.col-xs-6
        = f.input :lessor, input_html: { class: 'form-control' }
      .input-container.col-xs-6
        = f.input :lessee, input_html: { class: 'form-control' }

  .content-container
    %h4= t('instance_admin.manage.transactable_types.actions')

    %ul.tabs{'data-booking-type-list' => true}
      - f.object.all_action_types.each do |at|
        %li{class: at.name}
          = link_to "#" do
            %h5
              = t :label, scope: [:pricing, :mode, at.name]
    .clearfix
    = f.simple_fields_for :all_action_types, f.object.all_action_types do |at|
      = at.input :type, as: :hidden
      .action-type.panel-tab-container
        .row
          .input-container.col-xs-4
            = at.input :enabled, as: :boolean, inline_label: true, label: 'Enabled'

        = render "instance_admin/manage/transactable_types/action_types/#{at.object.name}", f: at, tt_form: f

  = content_for :header_buttons do
    = f.button :submit, t('instance_admin.save'), class: 'btn btn-blue pull-right', data: { 'submit-form' => 1, 'form-selector' => 'form' }

  - if resource.persisted?
    .content-container
      %h4 Bulk Upload CSV Fields
      .row
        = render partial: "instance_admin/data_uploads/custom_csv_fields", locals: { f: f }
