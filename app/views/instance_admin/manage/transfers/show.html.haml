.content-container
  %h4 #{t('instance_admin.manage.transfers.payment_transfer')} - #{resource.company_including_deleted.name}

  - if resource.transferred?
    .row
      .text-container
        = t('instance_admin.manage.transfers.payout_has_been_marked_as_transferred')
    - if resource.failed_at.present?
      .row
        .text-container
          = t('instance_admin.manage.transfers.payout_failed')
      .row
        .text-container
          = link_to t('instance_admin.manage.transfers.mark_as_manually_resolved'), not_failed_instance_admin_manage_transfer_path(resource), method: :post, class: 'btn btn-blue'

  - else
    .row
      .text-container
        = link_to t('instance_admin.manage.transfers.mark_as_manually_transferred'), transferred_instance_admin_manage_transfer_path(resource),
            :method => :post,
            :class => 'btn btn-blue'

        - if resource.pending?
          %p
            = t('instance_admin.manage.transfers.we_are_waiting_for_confirmation')
        - elsif resource.payout_processor.present? && !%w(PaymentGateway::StripeConnectPaymentGateway PaymentGateway::BraintreeMarketplacePaymentGateway).include?(resource.payout_processor.class.to_s)
          = link_to "#{t('instance_admin.manage.transfers.payout_via')} #{resource.payout_processor}", payout_instance_admin_manage_transfer_path(resource), method: :post, class: 'btn btn-blue', data: { confirm: t('instance_admin.manage.transfers.payment_will_go_live') }
        - else
          %p
            %i.ico-warning
            = t('instance_admin.manage.transfers.automatic_payout_is_not_available')


- if resource.payout_attempts.last && resource.payout_attempts.last.payment_gateway.try(:supports_payout?)
  .content-container
    .payout-attemps
      %h4
        = t('instance_admin.manage.transfers.automatic_payout_attempts')

      .row
        .text-container
          - if resource.payout_attempts.count.zero?
            = t('instance_admin.manage.transfers.no_automatic_payout_attempts')
          - else
            - resource.payout_attempts.each do |payout_attempt|
              .payout_attempt
                = "#{Money.new(payout_attempt.amount, payout_attempt.currency).format(with_currency: true)} #{t('instance_admin.at')} #{I18n.l(payout_attempt.created_at.in_time_zone(current_user.time_zone), format: :with_time_zone)} - "
                = t('instance_admin.succeeded') if payout_attempt.success
                - if payout_attempt.failed?
                  = t('instance_admin.failed')
                  = " - #{payout_attempt.failure_message}" if payout_attempt.failure_message.present?
                - if payout_attempt.pending?
                  = "#{t('instance_admin.pending')}"
                = (link_to(t('instance_admin.confirm'), payout_attempt.confirmation_url)).html_safe if payout_attempt.confirmation_url.present?

.content-container
  .payment-advice
    %h4
      = t('instance_admin.manage.transfers.payout_information')

    .row
      .text-container
        %div
          %strong
            = t('instance_admin.manage.transfers.amount_due')
          = resource.amount.format with_currency: true

        - resource.company_including_deleted.merchant_accounts(test: PlatformContext.current.instance.test_mode?).each do |merchant_account|
          %div
            %strong
              = merchant_account.type.gsub('MerchantAccount::', '').gsub('MerchantAccount', '').underscore.humanize
            - { id: merchant_account.internal_payment_gateway_account_id, state: merchant_account.state }.merge(merchant_account.data || {}).each do |key, value|
              %br
              = "#{key}: #{value}"

        %div
          %strong
            = t('instance_admin.manage.transfers.mailing_address')
          %p
            = resource.company_including_deleted.mailing_address

.content-container
  .row
    .table-container
      %table.table
        %tr
          %th
            = t('instance_admin.manage.transfers.company')
          %td
            = resource.company.name
        %tr
          %th
            = t('instance_admin.manage.transfers.transferred_at')
          %td= l(resource.transferred_at, format: :long) if resource.transferred_at.present?
        %tr
          %th
            = t('instance_admin.manage.transfers.amount_transferred')
          %td= humanized_money_with_cents_and_symbol(resource.amount)
        %tr
          %th
            = t('instance_admin.manage.transfers.guest_fee')
          %td= humanized_money_with_cents_and_symbol(resource.service_fee_amount_guest)
        %tr
          %th
            = t('instance_admin.manage.transfers.host_fee')
          %td= humanized_money_with_cents_and_symbol(resource.service_fee_amount_host)


.content-container
  %h4
    = t('instance_admin.manage.transfers.payments_included_in_the_payout_for')
    .row
      .table-container.col-xs-12
        %table.table
          %thead
            %tr
              %th= t('instance_admin.manage.transfers.payments_included_in_the_payout_for_section.reference')
              %th= t('instance_admin.manage.transfers.payments_included_in_the_payout_for_section.id')
              %th= t('instance_admin.manage.transfers.payments_included_in_the_payout_for_section.lessor')
              %th= t('instance_admin.manage.transfers.payments_included_in_the_payout_for_section.amount')
              %th= t('instance_admin.manage.transfers.payments_included_in_the_payout_for_section.refunded_amount')
              %th= t('instance_admin.manage.transfers.payments_included_in_the_payout_for_section.paid_at')

          %tbody
            - resource.payments.each do |payment|
              %tr
                %td= payment.payable_type
                %td= payment.payable_id
                %td= payment.payable.try(:user).try(:name)
                %td= number_to_currency_symbol(payment.currency, Money.new(payment.amount))
                %td= number_to_currency_symbol(payment.currency, Money.new(payment.refunds.sum :amount))

                %td= l(payment.created_at, format: :long)

