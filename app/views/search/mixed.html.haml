- no_footer!

= render 'search/meta_tags'

- content_for :mixed_locations do
  - if @searcher.results.present?
    .locations
      .search-max-price{:'data-max-price' => @searcher.max_price, :'data-min-price' => @searcher.min_price }
      .hidden-locations
        = render partial: 'search/map/location_marker', collection: @searcher.results, as: :location
        %input{type: 'hidden', id: 'result_count', value: @searcher.result_count}
        %input{type: 'hidden', name: 'meta_title', value: meta_title_for_search(platform_context, @searcher.search, @searcher.transactable_type.translated_bookable_noun)}
      = render 'search/mixed/pagination', locations: @searcher.results, result_count: @searcher.result_count
      - @searcher.results.each_with_index do |location, location_counter|
        - cache i18n_cache_key('mixed', location, location.company, @searcher.search.lgpricing_filters) do
          = render partial: 'search/mixed/location', locals: {location: location, location_counter: location_counter, transactable_type: @searcher.transactable_type, lgpricing_filters: @searcher.search.lgpricing_filters }

      = render 'search/mixed/pagination', locations: @searcher.results, result_count: @searcher.result_count
  - elsif @searcher.located
    .locations
      .hidden-locations
        %input{type: 'hidden', id: 'result_count', value: @searcher.result_count}
        %input{type: 'hidden', name: 'meta_title', value: meta_title_for_search(platform_context, @searcher.search, @searcher.transactable_type.translated_bookable_noun)}
      %div.no_results
        = render 'shared/loading_spinner'
        .text-center
          %br/
          %br/
          %h1.tk-adelle.fat No results found
  - else
    .locations
      .hidden-locations
        %input{type: 'hidden', id: 'result_count', value: @searcher.result_count}
        %input{type: 'hidden', name: 'meta_title', value: meta_title_for_search(platform_context, @searcher.search, @searcher.transactable_type.translated_bookable_noun)}
      %div.no_results
        = render 'shared/loading_spinner'

- content_for :hero do
  = render 'search/mixed/header'

  %section#results.mixed
    = render 'shared/loading_spinner'
    .map
      %section#map.google-map-wrapper
        .google-map
          #listings_map.inner{ 'data-update-text' => t('search.update_map')}
    .list{:'data-list' => true}
      .filters{:'data-search-filters-container' => true}
        -if current_instance.service_types.searchable.many?
          .search-mixed-filter{:'data-transactable-type-filter' => true}
            .container-fluid
              .row-fluid
                .span2
                  %h4
                    = t('search.service_type')
                .span10
                  %ul
                    - current_instance.service_types.searchable.each do |transactable_type|
                      %li.filter-option
                        %label.radio.small-radio
                          %input{type: 'radio', name: 'transactable_type_id', value: transactable_type.id, checked: @transactable_type.id == transactable_type.id}
                          %span.filter-label-text
                            = transactable_type.translated_bookable_noun

        - @searcher.searchable_categories.each do |category|
          - unless category.autocomplete?
            = render partial: 'search/mixed/filter', locals: { header_name: category.translated_name, selected_values: @searcher.category_ids || [], input_name: 'category_ids[]', options: @searcher.category_options(category)}
          - else
            = render partial: 'search/mixed/autocomplete_category_filter', locals: { category: category }

        #categories-children

        = render partial: 'search/shared/date_range'
        - @searcher.filterable_custom_attributes.each do |ca|
          - if ca.valid_values_translated.any?
            = render partial: 'search/mixed/filter', locals: { header_name: t(ca.label_key), selected_values: @searcher.search.lg_custom_attributes[ca.name.to_sym] || [], input_name: "lg_custom_attributes[#{ca.name}][]", options: ca.valid_values_translated, name: ca.name }
        - if @transactable_type.search_price_types_filter
          = render partial: 'search/mixed/filter', locals: { header_name: 'Pricing', selected_values: @searcher.search.lgpricing_filters || [], input_name: 'listing_pricing[]', options: @searcher.filterable_pricing }
        - if @searcher.transactable_type.display_location_type_filter?
          = render :partial => 'search/mixed/filter', :locals => { :header_name => 'Location Type', :selected_values => @searcher.search.lntypes_filters || [], :input_name => 'location_types_ids[]', :options => @searcher.filterable_location_types.map { |lt| [lt.name.downcase, lt.name ] } }


        - if @transactable_type.show_price_slider
          = render partial: 'search/shared/price_slider'

      .sort
        .results-count
          %h3#search_results_count
            = @searcher.result_count
            results
        .per-page
          %span per page
          = select_tag :per_page, options_for_select(['20', '50', '100'].map{|v| [v, v]}, params[:per_page])
        = render 'search/save'

      - if not request.xhr?
        = yield :mixed_locations

- if request.xhr?
  = yield :mixed_locations

- content_for :domready do
  $(document).trigger('init:mixed:searchresults.nearme');
