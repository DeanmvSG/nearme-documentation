= render :partial => 'approval_requests/form', :locals => { f: f }
- only_inputs ||= []
- photo_input_name_prefix = "listing" if local_assigns[:photo_input_name_prefix].nil?

= f.hidden_field :transactable_type_id, value: @transactable_type.id
- if only_inputs.empty? || only_inputs.include?(:enabled)
  .control-group
    = f.label :enabled, t('simple_form.switch.enabled'), :class => 'control-label'
    .controls
      .switch{'data-on-label' => "", 'data-off-label' => "", 'data-ajax-updateable' => f.object.persisted?}
        = f.check_box :enabled, disabled: !f.object.is_trusted?

= f.input :id, :as => :hidden if only_inputs.empty? || only_inputs.include?(:id)
- @transactable_type.custom_attributes.each do |attribute|
  - next if platform_context.instance.user_based_marketplace_views? && ( attribute.name == 'quantity' || attribute.name == 'capacity' )
  = draw_attribute_for_form(attribute, f) if only_inputs.empty? || only_inputs.include?(attribute.name.to_sym)

- unless platform_context.instance.listing_amenity_types.count.zero?
  = f.association :amenities, :collection => platform_context.instance.listing_amenity_types.order(:name), :as => :grouped_select, :group_method => :amenities, :group_label_method => :name, :label => "Amenities", :blank => false, :input_html => { 'data-placeholder' => "Select one or more", :class => 'custom-select', :multiple => true } if only_inputs.empty? || only_inputs.include?(:amenities)

- if content_for? :currency
  = yield(:currency)
- else
  = hidden_field_tag '', listing.location.currency, :id => 'currency-select'

- if only_inputs.empty? || only_inputs.include?(:price)
  = render partial: "custom_attributes/price", locals: { f: f }

- if only_inputs.empty? || only_inputs.include?(:availability_rules)
  .control-group
    = render :partial => 'availability_rules/form', :locals => { :f => f }

- if only_inputs.empty? || only_inputs.include?(:photos)
  .loading{:style => "display: none"}
    = image_tag "spinner.gif"
    %br/
    .span= t('manage.listings.photos.waiting_for_photo_processing')
  = file_upload_input_with_label('Photos',
                                  "#{photo_input_name_prefix}[photos_attributes][0][image]",
                                  manage_photos_path,
                                  Photo.new.image.thumbnail_dimensions[:medium],
                                  "Browse",
                                  :required => true,
                                  :error => f.object.errors.include?(:photos).present? ? "Please upload at least one photo." : nil) do
    - # caches img so it is displayed even for the first photo. Without this, loader icon is not displayed for the first photo
    .hidden.thumbnail-processing
      .loading-icon
    = hidden_field_tag "#{photo_input_name_prefix}", nil, :placeholder => t('ui.photo_uploader.caption'), :id => 'photo-item-input-template', :disabled => true, 'data-number' => 0
    - unless @photos.nil?
      - @photos.each_with_index do |photo|
        = get_fileupload_photo_html(photo.image_url(:medium),
                                    destroy_space_wizard_photo_path(:id => photo.id),
                                    edit_manage_photo_path(photo),
                                    :div,
                                    id: photo.id) do
          = text_field_tag "#{photo_input_name_prefix}[photos_attributes][#{photo.id}][caption]", photo.caption, :placeholder => t('ui.photo_uploader.caption')
          = hidden_field_tag "#{photo_input_name_prefix}[photo_ids][]", photo.id
          = hidden_field_tag "#{photo_input_name_prefix}[photos_attributes][#{photo.id}][id]", photo.id
          = hidden_field_tag "#{photo_input_name_prefix}[photos_attributes][#{photo.id}][position]", photo.position, class: 'photo-position-input'
- if (only_inputs.empty? || only_inputs.include?(:assigned_waiver_agreement_templates)) && f.object.location.company.waiver_agreement_templates.count > 0
  %h2.with-margin Waiver Agreement Templates
  = f.association :waiver_agreement_templates, collection: f.object.location.company.waiver_agreement_templates.order(:name).pluck(:name, :id), as: :check_boxes

.hidden
  - Money::Currency.table.values.each do |c|
    %span{:id => "currency_#{c[:iso_code]}"}
      = c[:symbol]
