- only_inputs = [] if only_inputs.nil?
- photo_input_name_prefix = "listing" if local_assigns[:photo_input_name_prefix].nil?

- enable_inputs_daily = f.object.hourly_reservations == false
- enable_inputs_hourly = f.object.hourly_reservations == true

= f.input :id, :as => :hidden if only_inputs.empty? || only_inputs.include?(:id)
= f.input :name, :label => "#{current_instance.bookable_noun} name", :placeholder => 'Examples, "Shared Desks", "Meeting Room", "Private Office"' if only_inputs.empty? || only_inputs.include?(:name)
= f.input :description, :required => current_instance.is_desksnearme?, :label => "#{current_instance.bookable_noun} description", :input_html => { :maxlength => 250}, :placeholder => 'Describe the individual listing that will be rented' if only_inputs.empty? || only_inputs.include?(:description)
= f.association :listing_type, :label => "#{current_instance.bookable_noun} type", :input_html => { :class => 'selectpicker' } if only_inputs.empty? || only_inputs.include?(:listing_type)
= f.input :quantity, :label => 'Quantity available', :placeholder => 2, :input_html => { :class => "mini" } if only_inputs.empty? || only_inputs.include?(:quantity)

- if content_for? :currency
  = yield(:currency)
- else
  = hidden_field_tag '', listing.location.currency, :id => 'currency-select'

- if only_inputs.empty? || only_inputs.include?(:price)
  %div{:class => "control-group #{"error" if f.object.errors.include?(:free).present?}"}
    = f.label :daily_price, 'Price', :class => 'control-label flush-top' do
      %abbr{:title => "required"} *
      Price

    .controls
      %div.price-inputs-daily
        %label.radio
          = f.radio_button :hourly_reservations, false, :checked => enable_inputs_daily
          Bookings are made by the day

        .price-input-options
          .price-inputs-wrapper.left
            = render 'manage/listings/price_field', :f => f, :price => "daily", :label => "day"
            = render 'manage/listings/price_field', :f => f, :price => "weekly", :label => "week"
            = render 'manage/listings/price_field', :f => f, :price => "monthly", :label => "month"

          .free-price
            .inline-rule
            .or-part Or
            %label.checkbox{:for => 'daily_free'}
              = f.check_box :free, :'data-behavior' => 'toggle-free', :id => 'daily_free'
              Free

      %div.price-inputs-hourly
        %label.radio
          = f.radio_button :hourly_reservations, true, :checked => enable_inputs_hourly
          Bookings are made by the hour

        .price-input-options
          .price-inputs-wrapper.left
            = render 'manage/listings/price_field', :f => f, :price => "hourly", :label => "hour"

          .free-price
            .inline-rule{:style => "height: 60px;"}
            .or-part Or
            %label.checkbox{:for => 'hourly_free'}
              = f.check_box :free, :'data-behavior' => 'toggle-free', :id => 'hourly_free'
              Free

      - if f.object.errors.include?(:hourly_reservations).present?
        %p.error-block= f.object.errors[:hourly_reservations].first

  - if f.object.errors.include?(:free).present?
    %p.error-block
      = 'must be free if all prices are zero'

- if only_inputs.empty? || only_inputs.include?(:availability_rules)
  .control-group
    = render :partial => 'availability_rules/form', :locals => { :f => f }


- if only_inputs.empty? || only_inputs.include?(:confirm_reservations)
  %div{:class => "control-group #{"error" if f.object.errors.include?(:confirm_reservations).present?}"}
    = f.label :confirm_reservations, 'Confirm guest bookings', :class => 'control-label'
    .controls
      .switch{'data-on-label' => "", 'data-off-label' => ""}
        = f.check_box :confirm_reservations

- if only_inputs.empty? || only_inputs.include?(:photos)
  = file_upload_input_with_label('Photos',
      manage_photos_path('size' => 'thumb'),
      "#{photo_input_name_prefix}[photos_attributes][0][image]",
      "Upload Photos",
      :required => true,
      :error => f.object.errors.include?(:photos).present? ? "Please upload at least one photo." : nil) do
    - if listing && listing.persisted?
      %li.hidden.photo-item
        = hidden_field_tag "#{photo_input_name_prefix}[photos_attributes]", nil, :placeholder => 'Enter Photo Caption...', :id => 'photo-item-input-template', :disabled => true, 'data-number' => 0
      - i = 0
      - # existing listing - we want to display only photos that belong to this listing
      - listing.photos.each do |photo|
        = get_fileupload_photo_html(photo.image_url(:space_listing), destroy_space_wizard_photo_path(:id => photo.id), :li, ((text_field_tag "#{photo_input_name_prefix}[photos_attributes][#{i}][caption]", photo.caption, :placeholder => 'Enter Photo Caption...', 'data-number' => i) + (hidden_field_tag "#{photo_input_name_prefix}[photos_attributes][#{i}][id]", photo.id )) )
        - i += 1
    - else
      - # new listing - if user uploaded photos and reloaded the page, we want to display all photos that do not belong to anything so far
      - current_user.photos.select { |p| p.content.nil? && p.content_type=='Listing' }.each do |photo|
        = fileupload_photo_with_input(photo.image_url(:thumb), destroy_space_wizard_photo_path(:id => photo.id), photo.id)

.hidden
  - Money::Currency.table.values.each do |c|
    %span{:id => "currency_#{c[:iso_code]}"} 
      = c[:symbol]
