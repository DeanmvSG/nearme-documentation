- only_inputs ||= []
- photo_input_name_prefix = f.object_name if local_assigns[:photo_input_name_prefix].nil?

- if only_inputs.empty? || only_inputs.include?(:approval_requests)
  = render 'dashboard/shared/fields/approval_requests', f: f

- if only_inputs.empty? || only_inputs.include?(:documents_upload)
  = render "dashboard/company/transactables/form_fields/documents_upload", f: f

- if only_inputs.empty? || only_inputs.include?(:transactable_type_id)
  = f.hidden_field :transactable_type_id, value: @transactable_type.id

- if only_inputs.empty? || only_inputs.include?(:enabled)
  = f.input :enabled, as: :switch, input_html: { disabled: !f.object.is_trusted? }

- @transactable_type.custom_attributes.each do |attribute|
  = draw_attribute_for_form(attribute, properties_form) if only_inputs.empty? || only_inputs.include?(attribute.name.to_sym)

- if only_inputs.empty? || only_inputs.include?(:name)
  = f.input :name, required: f.object.required?(:name)

- if only_inputs.empty? || only_inputs.include?(:description)
  = f.input :description, { required: f.object.required?(:description) }.merge(cke_attrs(model, :description))

- if only_inputs.empty? || only_inputs.include?(:confirm_reservations)
  = f.input :confirm_reservations, as: :switch, required: f.object.required?(:confirm_reservations)

- if only_inputs.empty? || only_inputs.include?(:capacity)
  = f.input :capacity, required: f.object.required?(:capacity), wrapper_html: { class: 'form-control-xs' }

- if only_inputs.empty? || only_inputs.include?(:price)
  = render "dashboard/company/transactables/form_fields/price", f: f, form_fields: form_fields, model: model

- if only_inputs.empty? || only_inputs.include?(:photos)
  = render 'dashboard/company/transactables/form_fields/photos', f: f

- if only_inputs.empty? || only_inputs.include?(:quantity)
  = render 'dashboard/company/transactables/form_fields/quantity', f: f

- if (only_inputs.empty? || only_inputs.include?(:assigned_waiver_agreement_templates)) && f.object.location.company.waiver_agreement_templates.count > 0
  = f.association :waiver_agreement_templates, collection: f.object.location.company.waiver_agreement_templates.order(:name).pluck(:name, :id), as: :check_boxes

- if only_inputs.empty? || @transactable_type.categories.roots.map { |c| "Category - #{c.name}".to_sym }.include?(only_inputs.first)
  = render 'dashboard/company/transactables/form_fields/category', f: f, field: only_inputs.first.to_s

- if only_inputs.empty? || only_inputs.include?(:currency)
  = render 'dashboard/company/transactables/form_fields/currency', f: f

- if only_inputs.empty? || only_inputs.include?(:tags)
  = render 'dashboard/company/transactables/form_fields/tags', f: f

- if  (only_inputs.empty? || only_inputs.include?(:shipping_info))
  = render "dashboard/company/transactables/form_fields/shipping_profiles", f: f

- if only_inputs.empty? || @transactable_type.custom_model_types.map { |c| "Custom Model - #{c.name}".to_sym }.include?(only_inputs.first)
  = render "dashboard/company/transactables/form_fields/custom_model", f: f, field: only_inputs.first.to_s

- if only_inputs.empty? || only_inputs.include?(:seller_attachments)
  = render "dashboard/company/transactables/form_fields/seller_attachments", f: f

- if only_inputs.empty? || only_inputs.include?(:package_details)
  = render 'listings/package_details', f: f
