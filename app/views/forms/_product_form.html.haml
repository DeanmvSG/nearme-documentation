= f.input :id, :as => :hidden if f.object.product.persisted?
= f.input :name, label: "Item Name", placeholder: "Name"
= f.input :description, label: "Item description", as: :ckeditor, :input_html => { :ckeditor => { :toolbar => 'simple' } }, placeholder: "Description"
= f.input :taxon_ids, label: "Category", :placeholder => "Enter a category"
.row
  .col-md-3
    %label Photos
  .col-md-9
    .loading{:style => "display: none"}
      = image_tag "spinner.gif"
      %br/
      .span= t('manage.listings.photos.waiting_for_photo_processing')
    = new_file_upload_input("#{f.object_name}[images_attributes][0][image]", dashboard_images_path, Spree::Image.new.image.thumbnail_dimensions[:medium], "Add Photo") do
      - # caches img so it is displayed even for the first photo. Without this, loader icon is not displayed for the first photo
      .hidden.thumbnail-processing
        .loading-icon
      = hidden_field_tag "#{f.object_name}", nil, :placeholder => t('ui.photo_uploader.caption'), :id => 'photo-item-input-template', 'data-no-caption' => true, 'data-association-name' => 'image', :disabled => true, 'data-number' => 0
      - unless @images.nil?
        - @images.each_with_index do |image|
          = get_fileupload_photo_html(image.image_url(:medium),
                                      dashboard_image_path(:id => image.id),
                                      edit_dashboard_image_path(image),
                                      :div,
                                      id: image.id) do
            = text_field_tag "#{f.object_name}[images_attributes][#{image.id}][caption]", image.caption, :placeholder => t('ui.photo_uploader.caption') if image.respond_to?(:caption)
            = hidden_field_tag "#{f.object_name}[image_ids][]", image.id
            = hidden_field_tag "#{f.object_name}[images_attributes][#{image.id}][id]", image.id
            = hidden_field_tag "#{f.object_name}[images_attributes][#{image.id}][position]", image.position, class: 'photo-position-input'

= f.input :price, as: :price, input_html: { currency: currency_symbol_from_code(Spree::Config[:currency] ) }

- if f.object.product.product_type.possible_manual_payment?
  = f.input :possible_manual_payment, as: :boolean

- if f.object.product.product_type.action_rfq?
  = f.input :action_rfq, as: :boolean

= f.input :quantity, as: :integer, :placeholder => "1"

= f.input :shippo_enabled, label: Spree::Product.human_attribute_name(:shippo_enabled), as: :boolean, input_html: { 'data-js-element-identifier' => 'product_form_shippo_enabled' }

.row.shippo_required_fields_row.enabled
  .explanation
    %p
      = t('manage.buy_sell.dimensions_templates.explanation1')
    %p.last
      = t('manage.buy_sell.dimensions_templates.explanation2')

  .dimensions_select_container
    = f.input :unit_of_measure, as: :hidden, input_html: { 'data-js-element-identifier' => 'product_form_unit_of_measure' }
    = content_tag :select, id: 'select_instance_dimensions_template', class: 'dimensions-templates product-form', :data => { 'js-element-identifier' => 'product_form_templates_list' } do
      = options_for_dimensions_templates_select(platform_context.instance.dimensions_templates)

  .dimensions_element_container
    .first
      = f.input :weight, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_weight' }
    .last
      = f.input :weight_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['weight'], label: Spree::Variant.human_attribute_name(:weight_unit), input_html: { 'data-js-element-identifier' => 'product_form_input_weight_unit' }

  .dimensions_element_container
    .first
      = f.input :depth, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_depth' }
    .last
      = f.input :depth_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['length'], label: Spree::Variant.human_attribute_name(:depth_unit), as: :select, input_html: { 'data-js-element-identifier' => 'product_form_input_depth_unit' }

  .dimensions_element_container
    .first
      = f.input :width, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_width' }
    .last
      = f.input :width_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['length'], label: Spree::Variant.human_attribute_name(:width_unit), as: :select, input_html: { 'data-js-element-identifier' => 'product_form_input_width_unit' }

  .dimensions_element_container
    .first
      = f.input :height, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_height' }
    .last
      = f.input :height_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['length'], label: Spree::Variant.human_attribute_name(:height_unit), as: :select, input_html: { 'data-js-element-identifier' => 'product_form_input_height_unit' }

- if platform_context.instance.documents_upload_enabled?
  = render "forms/document_requirements", f: f
