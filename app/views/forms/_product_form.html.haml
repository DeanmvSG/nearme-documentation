- only_inputs ||= []
= f.input :id, :as => :hidden if f.object.product.persisted?

- if only_inputs.empty? || only_inputs.include?(:name)
  = f.input :name
- if only_inputs.empty? || only_inputs.include?(:description)
  = f.input :description, as: :ckeditor, :input_html => { :ckeditor => { :toolbar => 'simple' } }, placeholder: "Description"
- if only_inputs.empty? || only_inputs.include?(:photos)
  .row
    .col-md-3
      %label
        = t('forms.product_form.photos')
    .col-md-9
      .loading{:style => "display: none"}
        = image_tag "spinner.gif"
        %br/
        .span= t('manage.listings.photos.waiting_for_photo_processing')
      = new_file_upload_input("#{f.object_name}[images_attributes][0][image]", dashboard_images_path, Spree::Image.new.image.thumbnail_dimensions[:medium], "Add Photo") do
        - # caches img so it is displayed even for the first photo. Without this, loader icon is not displayed for the first photo
        .hidden.thumbnail-processing
          .loading-icon
        = hidden_field_tag "#{f.object_name}", nil, :placeholder => t('ui.photo_uploader.caption'), :id => 'photo-item-input-template', 'data-no-caption' => true, 'data-association-name' => 'image', :disabled => true, 'data-number' => 0
        - unless @images.nil?
          - @images.each_with_index do |image|
            = get_fileupload_photo_html(image.image_url(:medium),
                                        dashboard_image_path(:id => image.id),
                                        edit_dashboard_image_path(image),
                                        :div,
                                        id: image.id) do
              = text_field_tag "#{f.object_name}[images_attributes][#{image.id}][caption]", image.caption, :placeholder => t('ui.photo_uploader.caption') if image.respond_to?(:caption)
              = hidden_field_tag "#{f.object_name}[image_ids][]", image.id
              = hidden_field_tag "#{f.object_name}[images_attributes][#{image.id}][id]", image.id
              = hidden_field_tag "#{f.object_name}[images_attributes][#{image.id}][position]", image.position, class: 'photo-position-input'

- if only_inputs.empty? || only_inputs.include?(:shipping_info)
  .row.shipping_method_block.shipping_method_list
    = render 'dashboard/base/shipping_profiles_list', f: f
  .container-fluid
    %a.shipping-profile-top.add_shipping_profile{ :data => { modal: true, href: new_dashboard_shipping_category_path, 'modal-class' => 'shipping_profiles_modal' } }
      =image_tag("themes/buy_sell/icon-cross.png")
      %span
        = t('manage.buy_sell.shipping_profiles.add_new_shipping_profile')

- @product_type.custom_attributes.each do |attribute|
  - if only_inputs.empty? || only_inputs.include?(attribute.name.to_sym)
    = draw_attribute_for_form(attribute, properties_form)


- if only_inputs.empty? || @product_type.categories.roots.map { |c| "Category - #{c.name}".to_sym }.include?(only_inputs.first)
  - category_name = only_inputs.first.to_s.split(" - ")[1]
  - category = @product_type.categories.roots.where(name: category_name).first
  - if category.present?
    = render partial: 'shared/category', locals: { category: category, f: f, categorizable: @product_type }

- if only_inputs.empty? || only_inputs.include?(:price)
  = f.input :price, as: :price, input_html: { currency: currency_symbol_from_code(Spree::Config[:currency] ) }

- if only_inputs.empty? || only_inputs.include?(:action_rfq)
  - if f.object.product.product_type.action_rfq?
    = f.input :action_rfq, as: :boolean

- if only_inputs.empty? || only_inputs.include?(:quantity)
  = f.input :quantity, as: :integer, :placeholder => "1"

- if only_inputs.empty? || only_inputs.include?(:integrated_shipping)
  - if current_instance.shippo_enabled?
    = f.input :shippo_enabled, label: Spree::Product.human_attribute_name(:shippo_enabled), as: :boolean, input_html: { 'data-js-element-identifier' => 'product_form_shippo_enabled' }

  .row.shippo_required_fields_row.enabled
    - if f.object.errors.present?
      = hidden_field_tag 'product_errors_present'

    .explanation
      %p
        = t('manage.buy_sell.dimensions_templates.explanation1')
      %p.last
        = t('manage.buy_sell.dimensions_templates.explanation2')

    .dimensions_select_container
      = f.input :unit_of_measure, as: :hidden, input_html: { 'data-js-element-identifier' => 'product_form_unit_of_measure' }
      = content_tag :select, id: 'select_instance_dimensions_template', class: 'dimensions-templates product-form', :data => { 'js-element-identifier' => 'product_form_templates_list' } do
        = options_for_dimensions_templates_select(platform_context.instance.dimensions_templates)

    .dimensions_element_container
      .first
        = f.input :weight, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_weight' }
      .last
        = f.input :weight_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['weight'], label: Spree::Variant.human_attribute_name(:weight_unit), input_html: { 'data-js-element-identifier' => 'product_form_input_weight_unit' }

    .dimensions_element_container
      .first
        = f.input :depth, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_depth' }
      .last
        = f.input :depth_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['length'], label: Spree::Variant.human_attribute_name(:depth_unit), as: :select, input_html: { 'data-js-element-identifier' => 'product_form_input_depth_unit' }

    .dimensions_element_container
      .first
        = f.input :width, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_width' }
      .last
        = f.input :width_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['length'], label: Spree::Variant.human_attribute_name(:width_unit), as: :select, input_html: { 'data-js-element-identifier' => 'product_form_input_width_unit' }

    .dimensions_element_container
      .first
        = f.input :height, as: :decimal, input_html: { :class => 'shippo_decimal_field', 'data-js-element-identifier' => 'product_form_input_height' }
      .last
        = f.input :height_unit, collection: DimensionsTemplate::UNITS_OF_MEASURE[f.object.unit_of_measure]['length'], label: Spree::Variant.human_attribute_name(:height_unit), as: :select, input_html: { 'data-js-element-identifier' => 'product_form_input_height_unit' }

- if only_inputs.empty? || only_inputs.include?(:documents_upload)
  - if platform_context.instance.documents_upload_enabled?
    = render "forms/document_requirements", f: f
