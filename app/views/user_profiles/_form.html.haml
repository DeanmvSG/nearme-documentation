- if f.object.respond_to?(:model)

  - only_inputs ||= []

  - if only_inputs.empty? || only_inputs.include?(:enabled)

    - options = { as: :switch }
    - if f.object.kind_of?(BaseForm)
      - if f.object.model.instance_profile_type.admin_approval? && !f.object.model.approved?
        - options[:disabled] = true
        - options[:hint] = t('dashboard.user_profile.requires_approval')
    - else
      - if f.object.instance_profile_type.admin_approval? && !f.object.approved?
        - options[:disabled] = true
        - options[:hint] = t('dashboard.user_profile.requires_approval')
    = f.input :enabled, options
  - elsif only_inputs.empty? || only_inputs.include?(:unavailable_periods)
    = render 'registrations/attributes/unavailable_periods', f: f
  - elsif only_inputs.empty? || (category = f.object.model.instance_profile_type.try(:categories).try(:roots).try(:detect) { |c| "Category - #{c.name}".to_sym == only_inputs.first}).present?
    = f.simple_fields_for :categories do |categories_form|
      = render partial: 'dashboard/shared/fields/category', locals: { category: category, f: categories_form }

  - elsif only_inputs.empty? || f.object.model.instance_profile_type.custom_model_types.map { |c| "Custom Model - #{c.name}".to_sym }.include?(only_inputs.first)
    - custom_model = f.object.model.instance_profile_type.custom_model_types.find_by(name: only_inputs.first.to_s.split(" - ")[1])
    = f.simple_fields_for :customizations do |customizations_form|
      = render 'registrations/attributes/custom_model_fields', custom_model: custom_model, f: customizations_form
  - elsif (f.object.model.instance_profile_type.try(:custom_attributes).map { |a| a.name.to_sym } & only_inputs).any?
    - f.object.model.instance_profile_type.try(:custom_attributes).try(:each) do |ca|
      - next unless only_inputs.empty? || only_inputs.include?(ca.name.to_sym)
      - if ca.uploadable?
        = render 'custom_attributes/uploadable', f: f, ca: ca
      - else
        = f.simple_fields_for :properties do |properties_form|
          = draw_attribute_for_form(ca, properties_form)
  - elsif f.object.model.user.respond_to?(only_inputs.first)
    = render :partial => 'registrations/new_attributes', :locals => { f: user_form, only_inputs: only_inputs }

- else # to be removed once form components are removed

  - only_inputs ||= []

  - if only_inputs.empty? || only_inputs.include?(:enabled)

    - options = { as: :switch }
    -# if f.object.instance_profile_type.admin_approval? && !f.object.approved?
      - options[:disabled] = true
      - options[:hint] = t('dashboard.user_profile.requires_approval')
    = f.input :enabled, options
  - elsif only_inputs.empty? || only_inputs.include?(:unavailable_periods)
    = render 'registrations/attributes/unavailable_periods', f: f
  - elsif only_inputs.empty? || (category = f.object.instance_profile_type.try(:categories).try(:roots).try(:detect) { |c| "Category - #{c.name}".to_sym == only_inputs.first}).present?
    = f.simple_fields_for :categories do |categories_form|
      = render partial: 'dashboard/shared/fields/category', locals: { category: category, f: categories_form }

  - elsif only_inputs.empty? || f.object.instance_profile_type.custom_model_types.map { |c| "Custom Model - #{c.name}".to_sym }.include?(only_inputs.first)
    - custom_model = f.object.instance_profile_type.custom_model_types.find_by(name: only_inputs.first.to_s.split(" - ")[1])
    = f.simple_fields_for :customizations do |customizations_form|
      = render 'registrations/attributes/custom_model_fields', custom_model: custom_model, f: customizations_form
  - elsif (f.object.instance_profile_type.try(:custom_attributes).map { |a| a.name.to_sym } & only_inputs).any?
    - f.object.instance_profile_type.try(:custom_attributes).try(:each) do |ca|
      - next unless only_inputs.empty? || only_inputs.include?(ca.name.to_sym)
      - if ca.uploadable?
        = f.simple_fields_for :custom_images, f.object.custom_images.where(custom_attribute_id: ca.id).first_or_initialize do |custom_images_form|
          = render 'custom_images/attribute', f: custom_images_form, ca: ca
      - else
        = f.simple_fields_for :properties do |properties_form|
          = draw_attribute_for_form(ca, properties_form)
  - elsif f.object.user.respond_to?(only_inputs.first)
    = render :partial => 'registrations/new_attributes', :locals => { f: user_form, only_inputs: only_inputs }
