-# TODO Adjust _attributes partial to bs3 when redo space wizard form

- resource ||= current_user
= render :partial => 'approval_requests/form', :locals => { f: f, object: resource }
- only_inputs ||= []
- only_inputs.map!(&:to_sym)
= f.input :name if only_inputs.include?(:name)
- if !only_inputs.include?(:name)
  = f.input :first_name, input_html: { value: f.object.first_name } if only_inputs.empty? || only_inputs.include?(:first_name)
  = f.input :middle_name, input_html: { value: f.object.middle_name } if only_inputs.empty? || only_inputs.include?(:middle_name)
  = f.input :last_name, input_html: { value: f.object.last_name } if only_inputs.empty? || only_inputs.include?(:last_name)
  - (f.object.instance_profile_type.try(:custom_attributes) || []).each do |attribute|
    = draw_attribute_for_form(attribute, f) if only_inputs.empty? || only_inputs.include?(attribute.name.to_sym)

= f.input :gender, collection: [['Male', 'male'], ['Female', 'female'], ['Unspecified', 'unspecified']], input_html: { class: 'selectpicker'}, include_blank: :true if only_inputs.empty? || only_inputs.include?(:gender)
= f.input :email, label: "Email" if only_inputs.empty? || only_inputs.include?(:email)
= f.input :time_zone, input_html: { class: 'selectpicker', "data-live-search" => "true" } if only_inputs.empty? || only_inputs.include?(:time_zone)


%div{'data-phone-fields-container' => true}
  = f.input :country_name, :label => "Country", :as => :select, :collection => user_country_name_options, :selected => user_country_default(@country), input_html: { 'data-country-selector' => true, class: 'selectpicker', "data-live-search" => "true" }, :required => true, include_blank: true

  .row{:class => ('error' if f.object.errors[:phone].present?) }
    .col-md-3
      = f.label :phone, :class => 'control-label required' do
        - if f.object.phone_required
          %abbr{:title => "required"} *
        Phone number

    .col-md-9.input-container
      .phone-number-country-code-field
        .country-calling-code
          = "+#{f.object.country.calling_code}" if f.object.country
        = f.text_field :phone, data: { 'phone' => true }
      - if f.object.errors[:phone].present?
        .error-block= f.object.errors[:phone].to_sentence

  .row.mobile-number-field{:class => ('error' if f.object.errors[:mobile_number].present?)}
    .col-md-3
      = f.label :mobile_number
    .col-md-9.input-container
      .phone-number-country-code-field
        .country-calling-code
          = "+#{f.object.country.calling_code}" if f.object.country
        = f.text_field :mobile_number, data: { 'mobile-number' => true }
      = label_tag do
        = check_box_tag "#{f.object.class.name.underscore}_mobile_same_as_phone", '1', (f.object.phone == f.object.mobile_number), data: { 'same-as-phone-checkbox' => true }
        = "Same as phone"

      - if f.object.errors[:mobile_number].present?
        .error-block= f.object.errors[:mobile_number].to_sentence

= f.input :current_location, label: "Current location", as: :string if only_inputs.empty? || only_inputs.include?(:current_location)
= f.input :company_name, label: "Company name", as: :string if only_inputs.empty? || only_inputs.include?(:company_name)
= f.association :industries, :blank => false, input_html: { class: 'selectpicker', "data-live-search" => "true" } if only_inputs.empty? || only_inputs.include?(:industries)
= f.input :job_title, label: "Job title", as: :string if only_inputs.empty? || only_inputs.include?(:job_title)
= f.input :skills_and_interests, label: "Skills and interests" if only_inputs.empty? || only_inputs.include?(:skills_and_interests)
= f.input :biography, label: "Biography" if only_inputs.empty? || only_inputs.include?(:biography)
= f.input :password, :label => (f.object.persisted? ? "Change password" : "Password" ) if only_inputs.empty? || only_inputs.include?(:password)
= f.input :drivers_licence_number if only_inputs.empty? || only_inputs.include?(:drivers_licence_number)
= f.input :gov_number, label: "Goverment Number" if only_inputs.empty? || only_inputs.include?(:goverment_number)
= f.input :twitter_url if only_inputs.empty? || only_inputs.include?(:twitter_url)
= f.input :linkedin_url if only_inputs.empty? || only_inputs.include?(:linkedin_url)
= f.input :facebook_url if only_inputs.empty? || only_inputs.include?(:facebook_url)
= f.input :google_plus_url if only_inputs.empty? || only_inputs.include?(:google_plus_url)
- if only_inputs.empty? || only_inputs.include?(:avatar)
  .row{:class => ('error' if f.object.errors[:avatar].present?)}
    .col-md-3
      = f.label :avatar, "Profile Photo"
    .col-md-9
      .col-md-4
        .single-photo
          = new_file_upload_input("avatar",
            avatar_path,
            resource.avatar.thumbnail_dimensions[:medium],
            "Upload Photo",
            "no-multiple" => true,
            :error => f.object.errors.include?(:avatar).present? ? "Please upload avatar." : nil) do
            - if current_user.avatar.any_url_exists?
              = fileupload_photo(resource.avatar_url(:medium),
                destroy_avatar_path,
                edit_avatar_path,
                :div)
- if only_inputs.empty? || only_inputs.include?(:phone)
  - content_for :domready do
    $(function(){ new PhoneNumbers.FieldsForm() });
