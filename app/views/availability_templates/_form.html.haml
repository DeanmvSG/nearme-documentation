.availability-rules
  %label.control-label.flush-top Availability

  - if f.object.respond_to?(:defer_availability_rules)
    = f.check_box :defer_availability_rules, :style => "display: none"

  - availability_choices(f.object).each do |template_id, label_text, options|
    .controls
      = label_tag(options[:id], :class => "inline radio") do
        = f.radio_button :availability_template_id, template_id, options || {}
        = label_text

  .controls.custom-availability-rules{:style => ('display: none' unless availability_custom?(f.object))}
    = t(:available_from, scope: [:pricing, :availability])
    = f.simple_fields_for :availability_template, get_availability_template_object(f.object) do |at|
      = at.input :id, as: :hidden, input_html: { value: at.object.id }
      .nested-fields-set
        = at.simple_fields_for(:availability_rules) do |af|
          .nested-container
            = af.input :_destroy, as: :hidden
            = render 'dashboard/company/transactables/time_availability', f: af, index: 1

      %p
        = t(:different_availability_info, scope: [:pricing, :availability])

      %p
        = link_to_add_association t(:add_availability, scope: [:pricing, :availability]) , at, :availability_rules, partial: 'dashboard/company/transactables/time_availability', class: 'btn btn-primary', data: { association_insertion_node: '.nested-fields-set', association_insertion_method: :append }


