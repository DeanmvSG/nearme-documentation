// Specifies owner specific CSS rules.
//
// We will iterate on this approach over time, and the longer term plan is to
// have a fully customisable templating environment.

// Specify owner-specific values for variables which are defaults in
// globals/variables

<%=
  {
    theme_hero: theme.hero_image.url,
    theme_icon: theme.icon_image.url,
    theme_icon2x: theme.icon_retina_image.url,
    theme_logo: theme.logo_image.url,
    theme_logo2x: theme.logo_retina_image.url
  }.map do |variable, value|
    next unless value.present?

    <<-SCSS
      $#{variable}: '#{value}';
    SCSS
  end.join
%>

<%=
  {
    theme_blue: theme.hex_color(:blue),
    theme_red: theme.hex_color(:red),
    theme_orange: theme.hex_color(:orange),
    theme_green: theme.hex_color(:green),
    theme_gray: theme.hex_color(:gray),
    theme_black: theme.hex_color(:black),
    theme_white: theme.hex_color(:white)
  }.map do |variable, color|
    next unless color.present?

    <<-SCSS
      $#{variable}: #{color};
    SCSS
  end.join
%>

<%=
  default_logo_height = 30.0
  if theme.logo_image.present?
    logo_dimensions = theme.logo_image.original_dimensions
    if logo_dimensions.any? && logo_dimensions[1] > default_logo_height
      logo_height = default_logo_height.to_i
      scale_factor = default_logo_height / logo_dimensions[1]
      logo_width = (scale_factor * logo_dimensions[0]).to_i
    else
      logo_height = logo_dimensions[1]
      logo_width = logo_dimensions[0]
    end
  else
    logo_height = nil
    logo_width = nil
  end

  default_icon_height = default_logo_height
  if theme.icon_image.present?
    icon_dimensions = theme.icon_image.original_dimensions
    if icon_dimensions.any? && icon_dimensions[1] > default_icon_height
      icon_height = default_icon_height.to_i
      scale_factor = default_icon_height / icon_dimensions[1]
      icon_width = (scale_factor * icon_dimensions[0]).to_i
    else
      icon_height = icon_dimensions[1]
      icon_width = icon_dimensions[0]
    end
  else
    icon_height = nil
    icon_width = nil
  end

  {
    theme_logo_width: logo_width,
    theme_logo_height: logo_height,
    theme_icon_width: icon_width,
    theme_icon_height: icon_height
  }.map do |variable, value|
    next unless value.present?

    <<-SCSS
      $#{variable}: #{value}px;
    SCSS
  end.join
%>

<%=
  default_logo_retina_height = 30.0
  if theme.logo_retina_image.present?
    logo_dimensions = theme.logo_retina_image.original_dimensions.map{|d| d.to_i / 2}
    if logo_dimensions.any? && logo_dimensions[1] > default_logo_retina_height
      logo_height = default_logo_retina_height.to_i
      scale_factor = default_logo_retina_height / logo_dimensions[1]
      logo_width = (scale_factor * logo_dimensions[0]).to_i
    else
      logo_height = logo_dimensions[1]
      logo_width = logo_dimensions[0]
    end
  else
    logo_height = nil
    logo_width = nil
  end

  default_icon_retina_height = default_logo_retina_height
  if theme.icon_retina_image.present?
    icon_dimensions = theme.icon_retina_image.original_dimensions.map{|d| d.to_i / 2}
    if icon_dimensions.any? && icon_dimensions[1] > default_icon_retina_height
      icon_height = default_icon_retina_height.to_i
      scale_factor = default_icon_retina_height / icon_dimensions[1]
      icon_width = (scale_factor * icon_dimensions[0]).to_i
    else
      icon_height = icon_dimensions[1]
      icon_width = icon_dimensions[0]
    end
  else
    icon_height = nil
    icon_width = nil
  end

  {
    theme_logo_retina_width: logo_width,
    theme_logo_retina_height: logo_height,
    theme_icon_retina_width: icon_width,
    theme_icon_retina_height: icon_height
  }.map do |variable, value|
    next unless value.present?

    <<-SCSS
      $#{variable}: #{value}px;
    SCSS
  end.join
%>

<%=
  if theme.theme_font.present?
    ThemeFont::FONT_TYPES.map do |font_type|
      <<-SCSS
        @font-face {
          font-family: "font_#{font_type}";
          src: url(#{theme.theme_font.send("#{font_type}_eot")});
          src: url(#{theme.theme_font.send("#{font_type}_eot")}?#iefix) format('eot'), url(#{theme.theme_font.send("#{font_type}_woff")}) format('woff'), url(#{theme.theme_font.send("#{font_type}_ttf")}) format('truetype'), url(#{theme.theme_font.send("#{font_type}_svg")}) format('svg');
        }

        $font-#{font_type}: 'font_#{font_type}', sans-serif;
      SCSS
    end.join
  end
%>

// Render the application css with the above configuration
@import "dashboard";
